[{"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/index.js":"1","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/serviceWorker.js":"2","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/App.js":"3","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/context/UserContext.js":"4","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/context/LayoutContext.js":"5","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/themes/index.js":"6","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/themes/default.js":"7","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Layout/Layout.js":"8","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/error/Error.js":"9","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/login/Login.js":"10","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/login/styles.js":"11","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/error/styles.js":"12","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Statistics/Statistics.js":"13","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Image_Segmentation/Image_Segmentation.js":"14","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Layout/styles.js":"15","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/weather/index.js":"16","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Webcam/Webcam.js":"17","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Statistics/styles.js":"18","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Audio_Player/Audio_Player.js":"19","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Tab/Tab.js":"20","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/Sidebar.js":"21","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/dashboard/Dashboard.js":"22","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Header/Header.js":"23","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Image_Segmentation/styles.js":"24","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Image_Picker/Image_Picker.js":"25","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Statistics/NDVI_Layers.js":"26","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Webcam/styles.js":"27","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/PolygonsTable/PolygonsTable.js":"28","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Charts/NDVI_Chart.js":"29","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Tab/styles.js":"30","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Image_Picker/styles.js":"31","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Header/styles.js":"32","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/dashboard/styles.js":"33","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Notification/Notification.js":"34","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/UserAvatar/UserAvatar.js":"35","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/PolygonsTable/DashboardPolygonTable.js":"36","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Weather_Widget/WeatherWidget.js":"37","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Wrappers/Wrappers.js":"38","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/UserAvatar/styles.js":"39","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Notification/styles.js":"40","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/styles.js":"41","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/components/SidebarLink/SidebarLink.js":"42","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/components/SidebarLink/styles.js":"43","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/components/Dot.js":"44","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/weather/styles.js":"45"},{"size":869,"mtime":1649382010010,"results":"46","hashOfConfig":"47"},{"size":5005,"mtime":1649382010015,"results":"48","hashOfConfig":"47"},{"size":1819,"mtime":1652725371320,"results":"49","hashOfConfig":"47"},{"size":2159,"mtime":1652792763740,"results":"50","hashOfConfig":"47"},{"size":1515,"mtime":1652726057917,"results":"51","hashOfConfig":"47"},{"size":496,"mtime":1650702743197,"results":"52","hashOfConfig":"47"},{"size":2987,"mtime":1649382010015,"results":"53","hashOfConfig":"47"},{"size":1556,"mtime":1650219868282,"results":"54","hashOfConfig":"47"},{"size":1571,"mtime":1649382010012,"results":"55","hashOfConfig":"47"},{"size":10981,"mtime":1652850282113,"results":"56","hashOfConfig":"47"},{"size":3816,"mtime":1652728347384,"results":"57","hashOfConfig":"47"},{"size":1334,"mtime":1649382010013,"results":"58","hashOfConfig":"47"},{"size":7655,"mtime":1652791465692,"results":"59","hashOfConfig":"47"},{"size":18887,"mtime":1653139770535,"results":"60","hashOfConfig":"47"},{"size":827,"mtime":1649382010007,"results":"61","hashOfConfig":"47"},{"size":20260,"mtime":1652850232143,"results":"62","hashOfConfig":"47"},{"size":2027,"mtime":1649382010009,"results":"63","hashOfConfig":"47"},{"size":921,"mtime":1652604741780,"results":"64","hashOfConfig":"47"},{"size":416,"mtime":1649382010006,"results":"65","hashOfConfig":"47"},{"size":6223,"mtime":1653133767328,"results":"66","hashOfConfig":"47"},{"size":18586,"mtime":1652792820293,"results":"67","hashOfConfig":"47"},{"size":7593,"mtime":1652893905123,"results":"68","hashOfConfig":"47"},{"size":3646,"mtime":1650332839308,"results":"69","hashOfConfig":"47"},{"size":778,"mtime":1649382010011,"results":"70","hashOfConfig":"47"},{"size":909,"mtime":1650331979083,"results":"71","hashOfConfig":"47"},{"size":10987,"mtime":1652726592058,"results":"72","hashOfConfig":"47"},{"size":278,"mtime":1649382010009,"results":"73","hashOfConfig":"47"},{"size":4762,"mtime":1652637956679,"results":"74","hashOfConfig":"47"},{"size":4595,"mtime":1652604741779,"results":"75","hashOfConfig":"47"},{"size":293,"mtime":1649382010009,"results":"76","hashOfConfig":"47"},{"size":1792,"mtime":1649382010007,"results":"77","hashOfConfig":"47"},{"size":3860,"mtime":1650332270250,"results":"78","hashOfConfig":"47"},{"size":2620,"mtime":1652604741780,"results":"79","hashOfConfig":"47"},{"size":3296,"mtime":1649382010007,"results":"80","hashOfConfig":"47"},{"size":593,"mtime":1649382010009,"results":"81","hashOfConfig":"47"},{"size":7836,"mtime":1652790566515,"results":"82","hashOfConfig":"47"},{"size":2181,"mtime":1650332012402,"results":"83","hashOfConfig":"47"},{"size":3790,"mtime":1649382010010,"results":"84","hashOfConfig":"47"},{"size":276,"mtime":1649382010009,"results":"85","hashOfConfig":"47"},{"size":993,"mtime":1649382010007,"results":"86","hashOfConfig":"47"},{"size":1746,"mtime":1652612765052,"results":"87","hashOfConfig":"47"},{"size":4723,"mtime":1652638117300,"results":"88","hashOfConfig":"47"},{"size":2215,"mtime":1652638155121,"results":"89","hashOfConfig":"47"},{"size":862,"mtime":1649382010008,"results":"90","hashOfConfig":"47"},{"size":751,"mtime":1652607774290,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"7k3wtn",{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"94"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"143","usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"94"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/index.js",[],["201","202"],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/serviceWorker.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/App.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/context/UserContext.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/context/LayoutContext.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/themes/index.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/themes/default.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Layout/Layout.js",["203","204","205","206","207"],"import React from \"react\";\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { Box, IconButton, Link } from \"@material-ui/core\";\nimport Icon from \"@mdi/react\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport Header from \"../Header\";\nimport Sidebar from \"../Sidebar\";\n\n// pages\nimport Dashboard from \"../../pages/dashboard\";\nimport Image_Segmentation from \"../../pages/Image_Segmentation/Image_Segmentation\";\nimport Statistics from \"../../pages/Statistics/Statistics\";\nimport Weather from \"../../pages/weather\";\n\n// context\nimport { useLayoutState } from \"../../context/LayoutContext\";\n\nfunction Layout(props) {\n  var classes = useStyles();\n\n  // global\n  var layoutState = useLayoutState();\n\n  return (\n    <div className={classes.root}>\n      <>\n        <Header history={props.history} />\n        <Sidebar history={props.history} />\n        <div\n          className={classnames(classes.content, {\n            [classes.contentShift]: layoutState.isSidebarOpened,\n          })}\n        >\n          <div className={classes.fakeToolbar} />\n          <Switch>\n            <Route path=\"/app/fields\" component={Dashboard} />\n            <Route path=\"/app/statistics\" component={Statistics} />\n            <Route\n              path=\"/app/disease-detection\"\n              component={Image_Segmentation}\n            />\n            <Route path=\"/app/weather\" component={Weather} />\n          </Switch>\n        </div>\n      </>\n    </div>\n  );\n}\n\nexport default withRouter(Layout);\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/error/Error.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/login/Login.js",["208"],"import React, { useState } from \"react\";\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n} from \"@material-ui/core\";\nimport { withRouter, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\n\n// styles\nimport useStyles from \"./styles\";\n\nimport { useUserDispatch, loginUser } from \"../../context/UserContext\";\n\nfunction Login(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const userDispatch = useUserDispatch();\n\n  // local\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTabId, setActiveTabId] = useState(0);\n  const [nameValue, setNameValue] = useState(\"\");\n  const [loginValue, setLoginValue] = useState(\"\");\n  const [loginPasswordValue, setLoginPasswordValue] = useState(\"\");\n\n  const [signupValue, setSignupValue] = useState(\"\");\n  const [signupPasswordValue, setSignupPasswordValue] = useState(\"\");\n  const [signupPasswordConfirmValue, setSignupPasswordConfirmValue] =\n    useState(\"\");\n  const [errroMessage, setErrorMessage] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [passwordConfirmError, setPasswordConfirmError] = useState(\"\");\n\n  const handleEmailChange = (event) => {\n    setSignupValue(event.target.value);\n\n    if (\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n        event.target.value,\n      )\n    ) {\n      setEmailError(\"\");\n      return true;\n    }\n    setEmailError(\"Email is not valid\");\n    return false;\n  };\n\n  const handlePasswordChange = (event) => {\n    setSignupPasswordValue(event.target.value);\n    // if (event.target.value.length > 5) {\n    //   setPasswordError(\"\");\n    //   return true;\n    // }\n    // setPasswordError(\"Password must be at least 6 characters\");\n    // return false;\n  };\n\n  const handlePasswordConfirmChange = (event) => {\n    setSignupPasswordConfirmValue(event.target.value);\n    // if (event.target.value === signupPasswordValue) {\n    //   setPasswordConfirmError(\"\");\n    //   return true;\n    // }\n    // setPasswordConfirmError(\"Passwords do not match\");\n    // return false;\n  };\n\n  const handleSignupUser = () => {\n    if (signupPasswordValue.length < 6) {\n      setPasswordError(\"Password must be at least 6 characters\");\n      return;\n    }\n\n    if (signupPasswordValue !== signupPasswordConfirmValue) {\n      setPasswordConfirmError(\"Passwords do not match\");\n      return;\n    }\n\n    setIsLoading(true);\n    const data = {\n      name: nameValue,\n      email: signupValue,\n      password: signupPasswordValue,\n      confirmPassword: signupPasswordConfirmValue,\n    };\n\n    axios\n      .post(`${process.env.REACT_APP_SERVER_URL}/register`, data)\n      .then((res) => {\n        // props.history.push(\"/\");\n        loginUser(\n          userDispatch,\n          res.data,\n          signupValue,\n          signupPasswordValue,\n          props.history,\n          setIsLoading,\n          setError,\n        );\n        setIsLoading(true);\n      })\n      .catch((err) => {\n        console.log(err);\n        setIsLoading(false);\n        setErrorMessage(err.response.data.message);\n      });\n  };\n\n  const handleLoginUser = () => {\n    setIsLoading(true);\n    const data = {\n      email: loginValue,\n      password: loginPasswordValue,\n    };\n\n    axios\n      .post(`${process.env.REACT_APP_SERVER_URL}/login`, data)\n      .then((res) => {\n        console.log(res);\n        loginUser(\n          userDispatch,\n          res.data,\n          loginValue,\n          loginPasswordValue,\n          props.history,\n          setIsLoading,\n          setError,\n        );\n      })\n      .catch((err) => {\n        console.log(err.response.data.message);\n        setIsLoading(false);\n        setErrorMessage(err.response.data.message);\n      });\n  };\n\n  return (\n    <Grid container className={classes.container}>\n      <div className={classes.formContainer}>\n        <div className={classes.form}>\n          <Tabs\n            value={activeTabId}\n            onChange={(e, id) => setActiveTabId(id)}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            centered\n          >\n            <Tab label=\"Login\" classes={{ root: classes.tab }} />\n            <Tab label=\"Sign up\" classes={{ root: classes.tab }} />\n          </Tabs>\n          {activeTabId === 0 && (\n            <React.Fragment>\n              <Typography variant=\"h2\" className={classes.greeting}>\n                Welcome Back!\n              </Typography>\n              <Fade in={error}>\n                <Typography color=\"secondary\" className={classes.errorMessage}>\n                  Something is wrong with your login or password :(\n                </Typography>\n              </Fade>\n              <TextField\n                id=\"email\"\n                InputProps={{\n                  classes: {\n                    underline: classes.textFieldUnderline,\n                    input: classes.textField,\n                  },\n                }}\n                value={loginValue}\n                // onChange={(e) => setLoginValue(e.target.value)}\n                onChange={(e) => {\n                  setLoginValue(e.target.value);\n                  setErrorMessage(\"\");\n                }}\n                margin=\"normal\"\n                placeholder=\"Email Adress\"\n                type=\"email\"\n                fullWidth\n              />\n              <TextField\n                id=\"password\"\n                InputProps={{\n                  classes: {\n                    underline: classes.textFieldUnderline,\n                    input: classes.textField,\n                  },\n                }}\n                value={loginPasswordValue}\n                onChange={(e) => {\n                  setLoginPasswordValue(e.target.value);\n                  setErrorMessage(\"\");\n                }}\n                margin=\"normal\"\n                placeholder=\"Password\"\n                type=\"password\"\n                fullWidth\n              />\n\n              <Typography className={classes.loginError}>\n                {errroMessage}\n              </Typography>\n\n              <div className={classes.formButtons}>\n                {isLoading ? (\n                  <CircularProgress size={26} className={classes.loginLoader} />\n                ) : (\n                  <Button\n                    disabled={\n                      loginValue.length === 0 || loginPasswordValue.length === 0\n                    }\n                    onClick={handleLoginUser}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    className={classes.submitButton}\n                  >\n                    Login\n                  </Button>\n                )}\n              </div>\n            </React.Fragment>\n          )}\n          {activeTabId === 1 && (\n            <React.Fragment>\n              <Typography variant=\"h2\" className={classes.subGreeting}>\n                Create your account\n              </Typography>\n              <Fade in={error}>\n                <Typography color=\"secondary\" className={classes.errorMessage}>\n                  Something is wrong with your login or password :(\n                </Typography>\n              </Fade>\n              <TextField\n                id=\"name\"\n                InputProps={{\n                  classes: {\n                    underline: classes.textFieldUnderline,\n                    input: classes.textField,\n                  },\n                }}\n                value={nameValue}\n                onChange={(e) => setNameValue(e.target.value)}\n                margin=\"normal\"\n                placeholder=\"Full Name\"\n                type=\"text\"\n                fullWidth\n              />\n              <TextField\n                id=\"email\"\n                InputProps={{\n                  classes: {\n                    underline: classes.textFieldUnderline,\n                    input: classes.textField,\n                  },\n                }}\n                value={signupValue}\n                onChange={handleEmailChange}\n                margin=\"normal\"\n                placeholder=\"Email Adress\"\n                type=\"email\"\n                fullWidth\n                helperText={emailError}\n                FormHelperTextProps={{\n                  classes: {\n                    root: classes.root,\n                  },\n                }}\n              />\n              <TextField\n                id=\"password\"\n                InputProps={{\n                  classes: {\n                    underline: classes.textFieldUnderline,\n                    input: classes.textField,\n                  },\n                }}\n                value={signupPasswordValue}\n                onChange={handlePasswordChange}\n                margin=\"normal\"\n                placeholder=\"Password\"\n                type=\"password\"\n                fullWidth\n                helperText={passwordError}\n                FormHelperTextProps={{\n                  classes: {\n                    root: classes.root,\n                  },\n                }}\n              />\n\n              <TextField\n                id=\"confirmPassword\"\n                InputProps={{\n                  classes: {\n                    underline: classes.textFieldUnderline,\n                    input: classes.textField,\n                  },\n                }}\n                value={signupPasswordConfirmValue}\n                onChange={handlePasswordConfirmChange}\n                margin=\"normal\"\n                placeholder=\"Confirm Password\"\n                type=\"password\"\n                fullWidth\n                helperText={passwordConfirmError}\n                FormHelperTextProps={{\n                  classes: {\n                    root: classes.root,\n                  },\n                }}\n              />\n\n              <Typography className={classes.loginError}>\n                {errroMessage}\n              </Typography>\n\n              <div className={classes.creatingButtonContainer}>\n                {isLoading ? (\n                  <CircularProgress size={26} />\n                ) : (\n                  <Button\n                    onClick={handleSignupUser}\n                    disabled={\n                      signupValue.length === 0 ||\n                      signupPasswordValue.length <= 5 ||\n                      nameValue.length === 0\n                    }\n                    size=\"large\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    className={classes.createAccountButton}\n                  >\n                    Create your account\n                  </Button>\n                )}\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    </Grid>\n  );\n}\n\nexport default withRouter(Login);\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/login/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/error/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Statistics/Statistics.js",["209","210","211"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\n// import useStyles from \"./styles.js\";\n\nimport NDVIChart from \"../../components/Charts/NDVI_Chart\";\n// import WeatherChart from \"../../components/WeatherChart/WeatherChart\";\nimport PolygonTable from \"../../components/PolygonsTable/PolygonsTable\";\nimport NDVILayers from \"./NDVI_Layers\";\nimport useStyles from \"./styles.js\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport { LinearProgress, Box } from \"@material-ui/core\";\n\nimport \"date-fns\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nexport default function Statistics(props) {\n  var classes = useStyles();\n\n  const initialToDate = new Date();\n  const UNIX_initialToDate = initialToDate.getTime() / 1000;\n\n  const priorDate = new Date();\n  priorDate.setDate(priorDate.getDate() - 60);\n\n  const UNIX_initialFromDate = priorDate.getTime() / 1000;\n\n  const initialDate = new Date();\n  initialDate.setDate(initialDate.getDate() - 60);\n\n  const [fromDate, setfromDate] = useState(initialDate);\n  const [toDate, settoDate] = useState(new Date());\n  const [fromDateUNIX, setfromDateUNIX] = useState(UNIX_initialFromDate);\n  const [toDateUNIX, settoDateUNIX] = useState(UNIX_initialToDate);\n  const [NDVI_data, setNDVI_data] = useState([]);\n  const [polygonId, setPolygonId] = useState(\"\");\n  const [firstPolygonId, setFirstPolygonId] = useState(\"\");\n  const [mountComponent, setMountComponent] = useState(false);\n  const [doesPolygonExist, setDoesPolygonExist] = useState(false);\n  const [getNDVIFailed, setGetNDVIFailed] = useState();\n  const [NDVILoading, setNDVILoading] = useState(false);\n\n  useEffect(() => {\n    let firstPolygon;\n    fetch(\n      `${process.env.REACT_APP_AGROMONITORING_API_URL}polygons?appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.length > 0) {\n          setDoesPolygonExist(true);\n          firstPolygon = data[0].id;\n\n          setPolygonId(firstPolygon);\n          setFirstPolygonId(firstPolygon);\n          setTimeout(() => {\n            setMountComponent(true);\n          }, 1000);\n        } else {\n          setDoesPolygonExist(false);\n          setPolygonId(\"\");\n          setFirstPolygonId(\"\");\n          setTimeout(() => {\n            setMountComponent(true);\n          }, 1000);\n        }\n      });\n\n    setTimeout(() => {\n      fetch(\n        `${process.env.REACT_APP_AGROMONITORING_API_URL}ndvi/history?polyid=${firstPolygon}&start=${fromDateUNIX}&end=${toDateUNIX}&appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          setNDVI_data(data);\n        });\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    getNDVI(fromDateUNIX, toDateUNIX);\n  }, [toDateUNIX, fromDateUNIX, polygonId]);\n\n  const handleFromDateChange = (date) => {\n    setfromDate(date);\n    const UNIX_dateFrom = date.getTime() / 1000;\n    setfromDateUNIX(UNIX_dateFrom);\n\n    getNDVI(UNIX_dateFrom, toDateUNIX);\n  };\n\n  const handleToDateChange = (date) => {\n    settoDate(date);\n    const UNIX_dateTo = date.getTime() / 1000;\n    settoDateUNIX(UNIX_dateTo);\n    getNDVI(fromDateUNIX, UNIX_dateTo);\n  };\n\n  const handleChange = (value) => {\n    setNDVI_data([]);\n    setPolygonId(value);\n    setTimeout(() => {\n      setMountComponent(true);\n    }, 1000);\n  };\n\n  const getNDVI = (fromDateUNIX, toDateUNIX) => {\n    setNDVILoading(true);\n    (async () => {\n      const rawResponse = await fetch(\n        `${process.env.REACT_APP_AGROMONITORING_API_URL}ndvi/history?polyid=${polygonId}&start=${fromDateUNIX}&end=${toDateUNIX}&appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n      );\n\n      if (rawResponse.status === 200) {\n        const data = await rawResponse.json();\n\n        setNDVI_data(data);\n        setGetNDVIFailed(false);\n        setNDVILoading(false);\n      } else {\n        setGetNDVIFailed(true);\n        setNDVILoading(false);\n      }\n    })();\n  };\n\n  return (\n    <Grid container spacing={4} className={classes.container}>\n      <Grid item md={12} xs={12}>\n        <PolygonTable onChange={handleChange} value={polygonId} />\n      </Grid>\n      {doesPolygonExist && (\n        <Grid container className={classes.NDVIContainer}>\n          <Grid item md={5}>\n            <Typography variant=\"h5\" style={{ color: \"#fff\" }}>\n              Historical\n            </Typography>\n            <Typography variant=\"h1\" style={{ color: \"#fff\" }}>\n              NDVI\n            </Typography>\n          </Grid>\n          <Grid item md={3}></Grid>\n          <Grid\n            item\n            md={4}\n            xs={12}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              marginBottom: \"20px\",\n            }}\n          >\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker\n                className={classes.datePicker}\n                label=\"From\"\n                variant=\"inline\"\n                openTo=\"date\"\n                views={[\"year\", \"month\", \"date\"]}\n                format=\"dd/MM/yyyy\"\n                value={fromDate}\n                onChange={handleFromDateChange}\n                s\n                disableFuture\n              />\n            </MuiPickersUtilsProvider>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker\n                className={classes.datePicker}\n                label=\"To\"\n                variant=\"inline\"\n                openTo=\"date\"\n                views={[\"year\", \"month\", \"date\"]}\n                format=\"dd/MM/yyyy\"\n                value={toDate}\n                onChange={handleToDateChange}\n                maxDate={new Date()}\n                minDate={fromDate}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n          <Grid item md={12} xs={12}>\n            {\" \"}\n            {NDVI_data.length > 0 ? (\n              <NDVIChart data={NDVI_data} />\n            ) : (\n              <Grid container>\n                <Grid\n                  item\n                  md={12}\n                  xs={12}\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    height: \"30vh\",\n                  }}\n                >\n                  {NDVILoading ? (\n                    <>\n                      <Typography variant=\"h5\" style={{ color: \"#fff\" }}>\n                        Loading NDVI data...\n                      </Typography>\n                      <Box sx={{ width: \"50%\", marginTop: \"2rem\" }}>\n                        <LinearProgress />\n                      </Box>\n                    </>\n                  ) : (\n                    <Typography variant=\"h5\" style={{ color: \"#fff\" }}>\n                      No NDVI data available for selected field\n                    </Typography>\n                  )}\n                </Grid>\n              </Grid>\n            )}\n          </Grid>\n          <Grid item md={12} xs={12}>\n            {mountComponent &&\n              (getNDVIFailed ? (\n                <Typography variant=\"h5\" style={{ color: \"#fff\" }}></Typography>\n              ) : (\n                <NDVILayers\n                  fromDateUNIX={fromDateUNIX}\n                  toDateUNIX={toDateUNIX}\n                  polygonId={polygonId}\n                />\n              ))}\n          </Grid>\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Image_Segmentation/Image_Segmentation.js",["212","213","214","215","216","217"],"import React, { useState } from \"react\";\nimport ImagePicker from \"../../components/Image_Picker/Image_Picker\";\nimport useStyles from \"./styles\";\nimport WebcamCapture from \"../../components/Webcam/Webcam.js\";\nimport {\n  Grid,\n  Box,\n  IconButton,\n  Button,\n  Backdrop,\n  Typography,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport Audio from \"../../components/Audio_Player/Audio_Player\";\nimport ResultTab from \"../../components/Tab/Tab\";\nimport { useMediaQuery } from \"react-responsive\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport FileUplaodIcon from \"../../assets/uploadIcon.svg\";\nimport PhotoCameraRoundedIcon from \"@material-ui/icons/PhotoCameraRounded\";\n\nfunction Image_Segmentation() {\n  const classes = useStyles();\n  const [image, setImage] = useState(null);\n  const [result, setResult] = useState(null);\n  const [resultImage, setResultImage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [imagePresent, setImagePresent] = useState(false);\n  const [isResult, setIsResult] = useState(false);\n  const [resultAudio, setResultAudio] = useState();\n  const [englishAudio, setEnglishAudio] = useState();\n  const [urduAudio, setUrduAudio] = useState();\n  const [open, setOpen] = useState(false);\n\n  const [source, setSource] = useState(\"\");\n\n  const [englishTabData, setEnglishTabData] = useState();\n  const [urduTabData, setUrduTabData] = useState();\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  const [model, setModel] = useState(\"resnet18\");\n\n  const remedialActions = {\n    healthy: {\n      title: \"Healthy: Healthy Plant\",\n      description:\n        \"Fertilize with the right fertilizer mixture and a balanced nutrient supply. Do not over-water the crop during the season. Do not touch healthy plants after touching infected plants. Maintain a high number of different varieties of plants around fields. If treating against an infestation, use specific products that do not affect beneficial insects. Remove diseased leaves, fruit or branches at the right time during the growing season. After the harvest, clean up plant debris from the field or orchard and burn them. In case of pests and diseases, always consider an integrated approach. with preventive measures together with biological treatments if available. As long as preventive measures are followed and care is taken to give plants and trees what they need, no chemical control should be needed!\",\n      symptoms: [\n        \"Dark green colored plant\",\n        \"Firm leaves\",\n        \"Brightly colored flowers\",\n        \"Well shaped, good-colored leaves, nutritious fruits and flowers\",\n        \"Root system is well developed\",\n      ],\n      // recommendations:{\n      //   title: \"Recommendations\",\n\n      // }\n    },\n    resistant: {\n      title: \"Resistant: Mild Yellow Stripe Rust\",\n      description:\n        \"The severity of the disease depends on the susceptibility of the plant. In vulnerable varieties, the fungus produces tiny, yellow to orange (rusty) pustules that are arranged in rows forming narrow stripes parallel to the leaf veins. They eventually merge and can engulf the whole leaf, a feature that appears earlier in young plants. These pustules (0.5 to 1 mm in diameter) can sometimes also be found on stems and heads. At later stages of the disease, long, necrotic, light brown stripes or blotches are visible on leaves, often covered with rusty pustules. In severe infections, the growth of plants is seriously compromised and tissues are damaged. The reduced leaf area leads to lower productivity, fewer spikes per plant and fewer grains per spike. Overall, the disease can lead to severe crop losses.\",\n      symptoms: [\n        \"Yellow colored plant\",\n        \"Tiny, rusty pustules arranged in stripes\",\n        \"Stems and heads can alse be affected\",\n      ],\n    },\n    susceptible: {\n      title: \"Susceptible: Severe Yellow Stripe Rust\",\n      description:\n        \"The severity of the disease depends on the susceptibility of the plant. In vulnerable varieties, the fungus produces tiny, yellow to orange (rusty) pustules that are arranged in rows forming narrow stripes parallel to the leaf veins. They eventually merge and can engulf the whole leaf, a feature that appears earlier in young plants. These pustules (0.5 to 1 mm in diameter) can sometimes also be found on stems and heads. At later stages of the disease, long, necrotic, light brown stripes or blotches are visible on leaves, often covered with rusty pustules. In severe infections, the growth of plants is seriously compromised and tissues are damaged. The reduced leaf area leads to lower productivity, fewer spikes per plant and fewer grains per spike. Overall, the disease can lead to severe crop losses.\",\n      symptoms: [\n        \"Yellow colored plant with severe rust spots\",\n        \"Tiny, rusty pustules arranged in stripes\",\n        \"Stems and heads can alse be affected\",\n      ],\n    },\n  };\n\n  const urduRemedialActions = {\n    healthy: {\n      title: \"صحت مند: صحت مند پودا\",\n      description:\n        \"کھاد کے صحیح مرکب اور متوازن غذائی اجزاء کے ساتھ کھاد ڈالیں۔ موسم کے دوران فصل کو زیادہ پانی نہ دیں۔ متاثرہ پودوں کو چھونے کے بعد صحت مند پودوں کو مت چھونا۔ کھیتوں کے ارد گرد پودوں کی مختلف اقسام کی بڑی تعداد کو برقرار رکھیں۔ اگر انفیکشن کے خلاف علاج کر رہے ہیں تو، مخصوص مصنوعات استعمال کریں جو فائدہ مند کیڑوں کو متاثر نہیں کرتی ہیں۔ بڑھتے ہوئے موسم کے دوران صحیح وقت پر بیمار پتے، پھل یا شاخیں ہٹا دیں۔ کٹائی کے بعد، کھیت یا باغ سے پودوں کا ملبہ صاف کر کے جلا دیں۔ کیڑوں اور بیماریوں کی صورت میں، ہمیشہ ایک مربوط نقطہ نظر پر غور کریں۔ اگر دستیاب ہو تو حیاتیاتی علاج کے ساتھ احتیاطی تدابیر کے ساتھ۔ جب تک احتیاطی تدابیر کی پیروی کی جاتی ہے اور پودوں اور درختوں کو ان کی ضرورت کے مطابق احتیاط برتی جاتی ہے، کسی کیمیائی کنٹرول کی ضرورت نہیں ہوگی!\",\n      symptoms: [\n        \"گہرے سبز رنگ کا پودا\",\n        \"پختہ پتے\",\n        \"چمکدار رنگ کے پھول\",\n        \"اچھی شکل، اچھے رنگ کے پتے، غذائیت سے بھرپور پھل اور پھول\",\n        \"جڑ کا نظام اچھی طرح سے تیار ہے\",\n      ],\n      // recommendations:{\n      //   title: \"Recommendations\",\n\n      // }\n    },\n    resistant: {\n      title: \"مزاحم: ہلکی پیلی پٹی زنگ\",\n      description:\n        \"بیماری کی شدت پودے کی حساسیت پر منحصر ہے۔ کمزور قسموں میں، فنگس چھوٹے، پیلے سے نارنجی (زنگ آلود) آبلے پیدا کرتی ہے جو پتوں کی رگوں کے متوازی تنگ دھاریوں کی شکل میں قطاروں میں ترتیب دی جاتی ہے۔ وہ آخرکار ضم ہو جاتے ہیں اور پورے پتے کو گھیر لیتے ہیں، یہ ایک خصوصیت جو جوان پودوں میں پہلے ظاہر ہوتی ہے۔ یہ آبلے (قطر میں 0.5 سے 1 ملی میٹر) بعض اوقات تنوں اور سروں پر بھی پائے جاتے ہیں۔ بیماری کے بعد کے مراحل میں، پتوں پر لمبی، نیکروٹک، ہلکی بھوری دھاریاں یا دھبے نظر آتے ہیں، جو اکثر زنگ آلود آبلوں سے ڈھکے ہوتے ہیں۔ شدید انفیکشن میں، پودوں کی نشوونما میں سنجیدگی سے سمجھوتہ ہوتا ہے اور بافتوں کو نقصان پہنچتا ہے۔ پتوں کا کم رقبہ کم پیداوری کا باعث بنتا ہے، فی پودا کم سپائیکس اور کم اناج فی سپائیک۔ مجموعی طور پر، بیماری فصلوں کو شدید نقصان پہنچا سکتی ہے۔\",\n      symptoms: [\n        \"پیلے رنگ کا پودا\",\n        \"چھوٹے، زنگ آلود آبلوں کو دھاریوں میں ترتیب دیا گیا ہے۔\",\n        \"تنوں اور سروں کو بھی متاثر کیا جا سکتا ہے۔\",\n      ],\n    },\n    susceptible: {\n      title: \"حساس: شدید پیلی پٹی زنگ\",\n      description:\n        \"بیماری کی شدت پودے کی حساسیت پر منحصر ہے۔ کمزور قسموں میں، فنگس چھوٹے، پیلے سے نارنجی (زنگ آلود) آبلے پیدا کرتی ہے جو پتوں کی رگوں کے متوازی تنگ دھاریوں کی شکل میں قطاروں میں ترتیب دی جاتی ہے۔ وہ آخرکار ضم ہو جاتے ہیں اور پورے پتے کو گھیر لیتے ہیں، یہ ایک خصوصیت جو جوان پودوں میں پہلے ظاہر ہوتی ہے۔ یہ آبلے (قطر میں 0.5 سے 1 ملی میٹر) بعض اوقات تنوں اور سروں پر بھی پائے جاتے ہیں۔ بیماری کے بعد کے مراحل میں، پتوں پر لمبی، نیکروٹک، ہلکی بھوری دھاریاں یا دھبے نظر آتے ہیں، جو اکثر زنگ آلود آبلوں سے ڈھکے ہوتے ہیں۔ شدید انفیکشن میں، پودوں کی نشوونما میں سنجیدگی سے سمجھوتہ ہوتا ہے اور بافتوں کو نقصان پہنچتا ہے۔ پتوں کا کم رقبہ کم پیداوری کا باعث بنتا ہے، فی پودا کم سپائیکس اور کم اناج فی سپائیک۔ مجموعی طور پر، بیماری فصلوں کو شدید نقصان پہنچا سکتی ہے۔\",\n      symptoms: [\n        \"پیلے رنگ کا پودا جس میں زنگ کے شدید دھبے ہوتے ہیں۔\",\n        \"چھوٹے، زنگ آلود آبلوں کو دھاریوں میں ترتیب دیا گیا ہے۔\",\n        \"تنوں اور سروں کو بھی متاثر کیا جا سکتا ہے۔\",\n      ],\n    },\n  };\n\n  const handleImage = (result) => {\n    const slug = result.split(\"base64,\").pop();\n    setImage(slug);\n    setImagePresent(true);\n  };\n\n  const handleImagePresent = (result) => {\n    setImagePresent(result);\n  };\n\n  const handleModelSelect = (event) => {\n    setModel(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    setOpen(true);\n    setResult();\n    setResultImage();\n    setIsResult(false);\n    const data = {\n      image: image,\n      model: model,\n    };\n    if (imagePresent) {\n      setLoading(true);\n      axios\n        .post(`${process.env.REACT_APP_SERVER_URL}/image-segment`, data, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        })\n        .then((res) => {\n          const response = res.data;\n          // split the reponse on the basis of space\n          const responseArray = response.split(\" \");\n          const leafResult = responseArray[1].replace(/\\r\\n/g, \"\");\n          setResult(leafResult);\n\n          const imageResult = responseArray[0].replace(\"jpg\", \"png\");\n\n          setResultImage(imageResult);\n\n          switch (leafResult) {\n            case \"Healthy\":\n              setEnglishAudio(\"/healthy_english.mp3\");\n              setUrduAudio(\"/healthy_urdu.mp3\");\n              setEnglishTabData(remedialActions.healthy);\n              setUrduTabData(urduRemedialActions.healthy);\n              break;\n            case \"Resistant\":\n              setEnglishAudio(\"/resistant_english.mp3\");\n              setUrduAudio(\"/resistant_urdu.mp3\");\n              setEnglishTabData(remedialActions.resistant);\n              setUrduTabData(urduRemedialActions.resistant);\n\n              break;\n            case \"Susceptible\":\n              setEnglishAudio(\"/susceptible_english.mp3\");\n              setUrduAudio(\"/susceptible_urdu.mp3\");\n\n              setEnglishTabData(remedialActions.susceptible);\n              setUrduTabData(urduRemedialActions.susceptible);\n\n              break;\n            default:\n              setEnglishAudio(\"/healthy_english.mp3\");\n              setUrduAudio(\"/healthy_urdu.mp3\");\n              setEnglishTabData(remedialActions.healthy);\n              setUrduTabData(urduRemedialActions.healthy);\n\n              break;\n          }\n          setLoading(false);\n          setIsResult(true);\n          setOpen(false);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const handleCapture = (target) => {\n    if (target.files) {\n      if (target.files.length !== 0) {\n        setImagePresent(true);\n        const file = target.files[0];\n        const newUrl = URL.createObjectURL(file);\n        setSource(newUrl);\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function () {\n          handleImage(reader.result);\n        };\n      }\n    }\n  };\n\n  return (\n    <div style={{ backgroundColor: \"#27293d\" }}>\n      <Grid container spacing={3} className={classes.grid_container}>\n        {!isMobile && (\n          <Grid item md={12} xs={!2}>\n            <Grid container>\n              <Grid item md={5} sm={12} xs={12} className={classes.ind_grid}>\n                <ImagePicker\n                  handleImage={handleImage}\n                  handleImagePresent={handleImagePresent}\n                />\n              </Grid>\n              <Grid item md={7}>\n                <Grid container>\n                  <Grid\n                    item\n                    md={3}\n                    sm={12}\n                    xs={12}\n                    className={classes.ind_grid}\n                  >\n                    <Typography variant=\"h5\" style={{ color: \"#fff\" }}>\n                      OR\n                    </Typography>\n                  </Grid>\n                  <Grid\n                    item\n                    md={9}\n                    sm={12}\n                    xs={12}\n                    className={classes.ind_grid}\n                  >\n                    <WebcamCapture\n                      handleImage={handleImage}\n                      handleImagePresent={handleImagePresent}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        )}\n        {isMobile && (\n          <Grid\n            item\n            xs={12}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            {source && (\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                className={classes.imgBox}\n              >\n                <img src={source} alt={\"snap\"} className={classes.img}></img>\n              </Box>\n            )}\n\n            <label htmlFor=\"icon-button-file\">\n              <input\n                accept=\"image/*\"\n                className={classes.input}\n                id=\"icon-button-file\"\n                type=\"file\"\n                capture=\"environment\"\n                onChange={(e) => handleCapture(e.target)}\n              />\n              <IconButton\n                aria-label=\"upload picture\"\n                component=\"span\"\n                className={classes.submitButton}\n                style={{\n                  fontSize: \"1.1rem\",\n                  height: \"2.5rem\",\n                  color: \"#fff\",\n                }}\n              >\n                <PhotoCameraRoundedIcon\n                  fontSize=\"large\"\n                  style={{ marginRight: \"10px\", color: \"#fff\" }}\n                />\n                Open Camera\n              </IconButton>\n            </label>\n          </Grid>\n        )}\n        <Grid\n          item\n          md={12}\n          sm={12}\n          xs={12}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <FormControl\n            style={{\n              width: isMobile ? \"50%\" : \"20%\",\n            }}\n          >\n            <InputLabel\n              id=\"demo-simple-select-label\"\n              style={{\n                color: \"#fff\",\n              }}\n            >\n              Select model\n            </InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={model}\n              label=\"Model\"\n              onChange={handleModelSelect}\n              style={{ color: \"#fff\" }}\n            >\n              <MenuItem value=\"resnet18\">Resnet 18</MenuItem>\n              <MenuItem value=\"resnet50\">Resnet 50</MenuItem>\n              <MenuItem value=\"alexnet\">AlexNet</MenuItem>\n            </Select>\n          </FormControl>\n\n          <Button\n            variant=\"contained\"\n            disabled={imagePresent ? false : true}\n            color=\"primary\"\n            size=\"large\"\n            className={classes.submitButton}\n            onClick={handleSubmit}\n          >\n            Submit\n          </Button>\n        </Grid>\n        {isResult && englishTabData && urduTabData && resultImage !== \"\" && (\n          <Grid item md={12} sm={12}>\n            <div className={classes.result_container}>\n              <ResultTab\n                englishAudio={englishAudio}\n                urduAudio={urduAudio}\n                result={result}\n                image={resultImage}\n                englishData={englishTabData}\n                urduData={urduTabData}\n              />\n            </div>\n          </Grid>\n        )}\n      </Grid>\n      <Backdrop\n        style={{\n          zIndex: \"100\",\n          backgroundColor: \"rgba(0,0,0,0.8)\",\n        }}\n        open={open}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <CircularProgress\n            style={{\n              margin: \"auto\",\n              color: \"#fff\",\n            }}\n          />\n          <Typography\n            style={{\n              color: \"white\",\n              fontSize: \"1.2rem\",\n              marginTop: \"1rem\",\n              fontWeight: \"lighter\",\n            }}\n          >\n            Processing the image. Please wait.\n          </Typography>\n        </div>\n      </Backdrop>\n    </div>\n  );\n}\n\nexport default Image_Segmentation;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Layout/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/weather/index.js",["218","219","220"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  Card,\n  CardContent,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport useStyles from \"./styles.js\";\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\";\nimport \"swiper/swiper.scss\";\n\nimport FeelsLike from \"../../assets/FllesLike.svg\";\nimport Cloud from \"../../assets/cloud-with-rain.svg\";\n\nconst StyledTableCellHeading = withStyles({\n  root: {\n    color: \"#fff\",\n    borderBottom: \"none\",\n  },\n})(TableCell);\n\nconst StyledTableCell = withStyles({\n  root: {\n    color: \"#fff\",\n  },\n})(TableCell);\n\nconst Weather = () => {\n  const classes = useStyles();\n  const [polygons, setPolygons] = useState([]);\n  const [currentWeather, setCurrentWeather] = useState();\n  const [hourlyWeather, setHourlyWeather] = useState([]);\n  const [dailyWeather, setDailyWeather] = useState([]);\n  const [currentSoil, setCurrentSoil] = useState();\n  const [loading, setLoading] = useState(false);\n  const [selectedField, setSelectedField] = useState();\n\n  useEffect(() => {\n    setLoading(true);\n    fetchPolygons();\n  }, []);\n\n  const fetchPolygons = () => {\n    fetch(\n      `${process.env.REACT_APP_AGROMONITORING_API_URL}polygons?appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        data.map((item, i) => {\n          const unixTimestamp = data[i].created_at;\n          var date = new Date(unixTimestamp * 1000);\n          const standard_date =\n            date.getDate() +\n            \"-\" +\n            (date.getMonth() + 1) +\n            \"-\" +\n            date.getFullYear();\n          data[i].created_at = standard_date;\n        });\n        setPolygons(data);\n        setSelectedField(data[0]);\n\n        // fetchWeather(data[0].center[0], data[0].center[1]);\n        fetchSoil(data[0].id);\n        fetchWeather(data[0].center[0], data[0].center[1]);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const fetchWeather = async (lon, lat) => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`,\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Forecast data: \", data);\n        setCurrentWeather(data.current);\n        setHourlyWeather(data.hourly);\n        setDailyWeather(data.daily);\n        setLoading(false);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const fetchSoil = async (id) => {\n    const promise = new Promise((resolve, reject) => {\n      fetch(\n        `https://api.agromonitoring.com/agro/1.0/soil?polygon_id=${id}&appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          setCurrentSoil(data);\n\n          resolve(data);\n        })\n        .catch((err) => console.log(err));\n    });\n    return promise;\n  };\n\n  const handleFieldClick = async (field) => {\n    setSelectedField(field);\n    setLoading(true);\n    const promise1 = new Promise((resolve, reject) => {\n      fetchWeather(field.center[0], field.center[1]);\n      resolve();\n    });\n    const promise2 = new Promise((resolve, reject) => {\n      fetchSoil(field.id);\n      resolve();\n    });\n    await Promise.all([promise1, promise2]);\n    setLoading(false);\n  };\n\n  const convertC = (x) => {\n    return x - 273.15;\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3}>\n        <Grid item md={4} xs={12}>\n          <Card\n            style={{\n              backgroundColor: \"#3F4257\",\n              borderRadius: \"10px\",\n            }}\n          >\n            <CardContent>\n              <TableContainer\n                style={{ backgroundColor: \"transparent\", color: \"white\" }}\n                sx={{\n                  \".MuiTableBody-root\": {\n                    backgroundColor: \"transparent\",\n                    color: \"white\",\n                  },\n                }}\n              >\n                <Table\n                  sx={{ minWidth: 500, color: \"#fff\" }}\n                  aria-label=\"simple table\"\n                >\n                  <TableHead>\n                    <TableRow>\n                      <StyledTableCellHeading component=\"th\" scope=\"row\">\n                        <Typography variant=\"h3\">Fields</Typography>\n                      </StyledTableCellHeading>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {polygons.map((item, i) => {\n                      return (\n                        <TableRow\n                          key={i}\n                          style={{\n                            cursor: \"pointer\",\n                            backgroundColor:\n                              selectedField === item\n                                ? \"#26293c\"\n                                : \"transparent\",\n                          }}\n                          onClick={() => handleFieldClick(item)}\n                        >\n                          <StyledTableCell component=\"th\" scope=\"row\">\n                            {item.name}\n                          </StyledTableCell>\n                          <StyledTableCell component=\"th\" scope=\"row\">\n                            {item.area.toFixed(2)}ha\n                          </StyledTableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item md={4} xs={12}>\n          <Card\n            style={{\n              backgroundColor: \"#3F4257\",\n              borderRadius: \"10px\",\n              color: \"white\",\n            }}\n          >\n            <CardContent>\n              {loading ? (\n                <Grid container>\n                  <Grid\n                    item\n                    md={12}\n                    xs={12}\n                    style={{\n                      textAlign: \"center\",\n                    }}\n                  >\n                    <CircularProgress\n                      style={{\n                        color: \"white\",\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n              ) : (\n                <Grid container spacing={2}>\n                  <Grid item md={12} xs={12}>\n                    <Typography variant=\"body1\" component=\"h2\">\n                      Current\n                    </Typography>\n                    <Typography\n                      style={{\n                        fontSize: \"1.7rem\",\n                        fontWeight: \"400\",\n                      }}\n                    >\n                      Weather\n                    </Typography>\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={6}\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <img\n                      src={\n                        \"/weather-icons/\" +\n                        currentWeather?.weather[0]?.icon +\n                        \".png\"\n                      }\n                      alt=\"weather\"\n                      style={{\n                        width: \"120px\",\n                        height: \"120px\",\n                      }}\n                    />\n                  </Grid>\n                  <Grid item md={6} xs={6}>\n                    <Typography\n                      style={{ fontSize: \"2.5rem\", fontWeight: \"400\" }}\n                      align=\"center\"\n                    >\n                      {convertC(currentWeather?.temp).toFixed(0)}° C\n                    </Typography>\n                    <Typography\n                      style={{\n                        fontSize: \"1rem\",\n                        fontWeight: \"400\",\n                        marginBottom: \"10px\",\n                      }}\n                      align=\"center\"\n                    >\n                      {currentWeather?.weather[0]?.description}\n                    </Typography>\n\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        alignItems: \"center\",\n                      }}\n                    >\n                      <img\n                        src={FeelsLike}\n                        alt=\"feels like\"\n                        width=\"40px\"\n                        height=\"35px\"\n                      ></img>\n                      <Typography\n                        style={{ fontSize: \"1rem\", fontWeight: \"400\" }}\n                      >\n                        Feels like{\" \"}\n                        {convertC(currentWeather?.feels_like).toFixed(0)}° C\n                      </Typography>\n                    </div>\n\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        alignItems: \"center\",\n                      }}\n                    >\n                      <img src={Cloud} alt=\"feels like\"></img>\n                      <Typography\n                        style={{ fontSize: \"1rem\", fontWeight: \"400\" }}\n                      >\n                        Cloudly - {currentWeather?.clouds}%\n                      </Typography>\n                    </div>\n                  </Grid>\n                </Grid>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item md={4} xs={12}>\n          <Card\n            style={{\n              backgroundColor: \"#3F4257\",\n              borderRadius: \"10px\",\n              color: \"white\",\n            }}\n          >\n            <CardContent>\n              {loading ? (\n                <Grid container>\n                  <Grid\n                    item\n                    md={12}\n                    xs={12}\n                    style={{\n                      textAlign: \"center\",\n                    }}\n                  >\n                    <CircularProgress\n                      style={{\n                        color: \"white\",\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n              ) : (\n                <Grid container spacing={2}>\n                  <Grid item md={12}>\n                    <Typography variant=\"body1\" component=\"h2\">\n                      Current\n                    </Typography>\n                    <Typography\n                      style={{\n                        fontSize: \"1.7rem\",\n                        fontWeight: \"400\",\n                      }}\n                    >\n                      Soil data\n                    </Typography>\n                  </Grid>\n                  <Grid item md={12}>\n                    <Grid container spacing={3}>\n                      <Grid\n                        item\n                        md={6}\n                        xs={8}\n                        className={classes.soilLeftTextContainer}\n                      >\n                        <Typography className={classes.soilLeftText}>\n                          Temperature at the surface\n                        </Typography>\n                      </Grid>\n                      <Grid item md={6} xs={4}>\n                        <Typography className={classes.soilRightText}>\n                          {convertC(currentSoil?.t0).toFixed(0)}° C\n                        </Typography>\n                      </Grid>\n                      <Grid\n                        item\n                        md={6}\n                        xs={8}\n                        className={classes.soilLeftTextContainer}\n                      >\n                        <Typography className={classes.soilLeftText}>\n                          Temperature at the depth of 10cm\n                        </Typography>\n                      </Grid>\n                      <Grid item md={6} xs={4}>\n                        <Typography className={classes.soilRightText}>\n                          {convertC(currentSoil?.t10).toFixed(0)}° C\n                        </Typography>\n                      </Grid>\n                      <Grid\n                        item\n                        md={6}\n                        xs={8}\n                        className={classes.soilLeftTextContainer}\n                      >\n                        <Typography className={classes.soilLeftText}>\n                          Soil moisture\n                        </Typography>\n                      </Grid>\n                      <Grid item md={6} xs={4}>\n                        <Typography className={classes.soilRightText}>\n                          {(currentSoil?.moisture * 100).toFixed(2)}%\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid\n          item\n          md={12}\n          xs={12}\n          style={{\n            overflowX: \"auto\",\n            width: \"100%\",\n          }}\n          mb={3}\n        >\n          <Typography\n            variant=\"h3\"\n            component=\"h3\"\n            style={{ color: \"white\", marginBottom: \"1rem\" }}\n          >\n            Today\n          </Typography>\n          {!loading ? (\n            <Swiper\n              spaceBetween={20}\n              slidesPerView={2}\n              breakpoints={{\n                // when window width is >= 320px\n                320: {\n                  slidesPerView: 3,\n                  spaceBetween: 10,\n                },\n                // when window width is >= 480px\n                480: {\n                  slidesPerView: 3,\n                  spaceBetween: 10,\n                },\n                // when window width is >= 640px\n                640: {\n                  width: 640,\n                  slidesPerView: 4,\n                },\n                // when window width is >= 768px\n                768: {\n                  width: 768,\n                  slidesPerView: 5,\n                },\n                // when window width is >= 991px\n                991: {\n                  width: 991,\n                  slidesPerView: 6,\n                },\n                // when window width is >= 1024px\n                1024: {\n                  width: 1024,\n                  slidesPerView: 6,\n                },\n              }}\n            >\n              {hourlyWeather.map((item, i) => {\n                return (\n                  <SwiperSlide key={i.toString()}>\n                    <Card className={classes.weatherCard}>\n                      <CardContent className={classes.weatherCardContent}>\n                        <Typography>\n                          {new Date(item.dt * 1000).toLocaleString(\"en-US\", {\n                            hour: \"numeric\",\n                            minute: \"numeric\",\n                            hour12: true,\n                          })}\n                        </Typography>\n                        <img\n                          src={\n                            \"/weather-icons/\" + item.weather[0].icon + \".png\"\n                          }\n                          alt={item.weather[0].description}\n                          style={{\n                            width: \"80px\",\n                            height: \"80px\",\n                          }}\n                        />\n                        <Typography variant=\"body1\">\n                          {convertC(item.temp).toFixed(0)}° C\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </SwiperSlide>\n                );\n              })}\n            </Swiper>\n          ) : (\n            <Grid container>\n              <Grid\n                item\n                md={12}\n                xs={12}\n                style={{\n                  textAlign: \"center\",\n                }}\n              >\n                <CircularProgress\n                  style={{\n                    color: \"white\",\n                  }}\n                />\n              </Grid>\n            </Grid>\n          )}\n        </Grid>\n        <Grid\n          item\n          md={12}\n          xs={12}\n          mt={3}\n          style={{\n            marginBottom: \"3rem\",\n          }}\n        >\n          <Typography\n            variant=\"h3\"\n            component=\"h3\"\n            style={{ color: \"white\", marginBottom: \"1rem\" }}\n          >\n            Weekly\n          </Typography>\n          <Grid container spacing={2}>\n            {!loading ? (\n              <Swiper\n                spaceBetween={20}\n                slidesPerView={2}\n                breakpoints={{\n                  // when window width is >= 320px\n                  320: {\n                    slidesPerView: 3,\n                    spaceBetween: 10,\n                  },\n                  // when window width is >= 480px\n                  480: {\n                    slidesPerView: 3,\n                    spaceBetween: 10,\n                  },\n                  // when window width is >= 640px\n                  640: {\n                    width: 640,\n                    slidesPerView: 4,\n                  },\n                  // when window width is >= 768px\n                  768: {\n                    width: 768,\n                    slidesPerView: 5,\n                  },\n                  // when window width is >= 991px\n                  991: {\n                    width: 991,\n                    slidesPerView: 6,\n                  },\n                  // when window width is >= 1024px\n                  1024: {\n                    width: 1024,\n                    slidesPerView: 6,\n                  },\n                }}\n              >\n                {dailyWeather.map((day, i) => {\n                  return (\n                    <SwiperSlide key={i.toString()}>\n                      <Card className={classes.weatherCard}>\n                        <CardContent className={classes.weatherCardContent}>\n                          <Typography>\n                            {new Date(day.dt * 1000).toLocaleString(\"en-US\", {\n                              weekday: \"short\",\n                            })}\n                          </Typography>\n                          <img\n                            src={\n                              \"/weather-icons/\" + day.weather[0].icon + \".png\"\n                            }\n                            alt={day.weather[0].description}\n                            style={{\n                              width: \"80px\",\n                              height: \"80px\",\n                            }}\n                          />\n                          <Typography variant=\"body1\">\n                            {convertC(day.temp.max).toFixed(0)}°{\" \"}\n                            <span> - </span> {convertC(day.temp.min).toFixed(0)}\n                            ° C\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </SwiperSlide>\n                  );\n                })}\n              </Swiper>\n            ) : (\n              <Grid container>\n                <Grid\n                  item\n                  md={12}\n                  xs={12}\n                  style={{\n                    textAlign: \"center\",\n                  }}\n                >\n                  <CircularProgress\n                    style={{\n                      color: \"white\",\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default Weather;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Webcam/Webcam.js",["221"],"import React, { useState, useRef } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { Button } from \"@material-ui/core\";\nimport useStyles from \"./styles.js\";\nimport CameraAltIcon from \"@material-ui/icons/CameraAlt\";\n\nconst WebcamCapture = (props) => {\n  const classes = useStyles();\n\n  const [image, setImage] = useState(\"\");\n  const webcamRef = useRef(null);\n\n  const videoConstraints = {\n    width: 300,\n    height: 300,\n    facingMode: \"user\",\n  };\n\n  const capture = React.useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImage(imageSrc);\n    props.handleImage(imageSrc);\n  });\n\n  const retake = () => {\n    setImage(\"\");\n    props.handleImagePresent(false);\n  };\n\n  return (\n    <div className=\"webcam-container\">\n      <div className=\"webcam-img\">\n        {image === \"\" ? (\n          <Webcam\n            audio={false}\n            // height={400}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n            // width={300}\n            videoConstraints={videoConstraints}\n          />\n        ) : (\n          <img src={image} alt=\"img\" />\n        )}\n        {/* <input type=\"file\" accept=\"image/*\" capture=\"environment\" />{\" \"} */}\n      </div>\n      <div>\n        {image !== \"\" ? (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={(e) => {\n              e.preventDefault();\n              retake();\n            }}\n            className={classes.webcamBtn}\n            startIcon={<CameraAltIcon />}\n          >\n            Retake Image\n          </Button>\n        ) : (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={(e) => {\n              e.preventDefault();\n              capture();\n            }}\n            className={classes.webcamBtn}\n            startIcon={<CameraAltIcon />}\n          >\n            Capture\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WebcamCapture;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Statistics/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Audio_Player/Audio_Player.js",["222","223","224"],"import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\n// import AudioPlayer from \"material-ui-audio-player\";\nimport Button from \"@material-ui/core/Button\";\nimport AudioPlayer from \"react-h5-audio-player\";\nimport \"react-h5-audio-player/lib/styles.css\";\n\nfunction Audio(props) {\n  return <AudioPlayer src={props.audio} style={{ borderRadius: \"10px\" }} />;\n}\n\nexport default Audio;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Tab/Tab.js",["225","226"],"import React, { useEffect, useState } from \"react\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport PropTypes from \"prop-types\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Audio from \"../../components/Audio_Player/Audio_Player\";\nimport useStyles from \"./styles.js\";\nimport { useMediaQuery } from \"react-responsive\";\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n  const classes = useStyles();\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      className={classes.tabPanel}\n      style={{ padding: isMobile ? \"10px 0px\" : \"50px 20px\" }}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nexport default function ReaultTab(props) {\n  console.log(\"Image value\", props.image);\n  const [value, setValue] = React.useState(0);\n  const classes = useStyles();\n  const { englishAudio, urduAudio, englishData, urduData } = props;\n  const [image, setImage] = useState();\n  const [imageURL, setImageURL] = useState();\n  const [fallback, setFallback] = useState(false);\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  useEffect(() => {\n    setImage(props.image);\n    setImageURL(`${process.env.REACT_APP_SERVER_URL}/${props.image}`);\n  }, []);\n\n  useEffect(() => {\n    setImage(props.image);\n    setImageURL(`${process.env.REACT_APP_SERVER_URL}/${props.image}`);\n  }, [props.image]);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const reloadSrc = (e) => {\n    if (fallback) {\n      e.target.src = `${process.env.REACT_APP_SERVER_URL}/${props.image}`;\n    } else {\n      // e.target.src = imageURL(\n      //   `${process.env.REACT_APP_SERVER_URL}/${props.image}`,\n      // );\n      e.target.src = `${process.env.REACT_APP_SERVER_URL}/${props.image}`;\n      setFallback(true);\n    }\n  };\n\n  return (\n    <Card\n      style={{\n        width: \"100%\",\n        padding: isMobile ? \"0.3rem\" : \"1rem\",\n        backgroundColor: \"#3f4257\",\n        color: \"#fff\",\n      }}\n    >\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"basic tabs example\"\n        >\n          <Tab label=\"English\" {...a11yProps(0)} />\n          <Tab label=\"اُردُو\" {...a11yProps(1)} />\n        </Tabs>\n      </Box>\n      <TabPanel value={value} index={0}>\n        <Grid container spacing={4}>\n          <Grid item md={6} xs={12} style={{ padding: \"1rem\" }}>\n            <Typography\n              variant=\"h4\"\n              component=\"h2\"\n              style={{ fontWeight: \"bold\" }}\n            >\n              {englishData.title}\n            </Typography>\n            <Typography\n              variant=\"body1\"\n              component=\"p\"\n              style={{ textAlign: \"justify\" }}\n            >\n              {englishData.description}\n            </Typography>\n\n            <Typography\n              variant=\"h5\"\n              bold\n              component=\"h2\"\n              style={{ fontWeight: \"bold\", marginTop: \"20px\" }}\n            >\n              Symptoms\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              {englishData.symptoms.map((symptom, index) => (\n                <li key={index}>{symptom}</li>\n              ))}\n            </Typography>\n          </Grid>\n\n          <Grid\n            item\n            md={6}\n            xs={12}\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"space-around\",\n              alignItems: \"center\",\n            }}\n          >\n            <Audio audio={englishAudio} />\n            <img\n              src={imageURL}\n              alt=\"result\"\n              className={classes.resultImage}\n              key={Date.now()}\n            />\n          </Grid>\n        </Grid>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Grid container spacing={4}>\n          <Grid item md={6} xs={12} style={{ padding: \"1rem\" }}>\n            <Typography\n              variant=\"h4\"\n              component=\"h2\"\n              style={{ fontWeight: \"bold\", direction: \"rtl\" }}\n            >\n              {urduData.title}\n            </Typography>\n            <Typography\n              variant=\"body1\"\n              component=\"p\"\n              style={{ textAlign: \"justify\", direction: \"rtl\" }}\n            >\n              {urduData.description}\n            </Typography>\n\n            <Typography\n              variant=\"h5\"\n              component=\"h2\"\n              style={{\n                fontWeight: \"bold\",\n                marginTop: \"20px\",\n                direction: \"rtl\",\n              }}\n            >\n              علامات\n            </Typography>\n            <Typography\n              variant=\"body1\"\n              component=\"p\"\n              style={{\n                direction: \"rtl\",\n              }}\n            >\n              {urduData.symptoms.map((symptom, index) => (\n                <li key={index}>{symptom}</li>\n              ))}\n            </Typography>\n          </Grid>\n\n          <Grid\n            item\n            md={6}\n            xs={12}\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"space-around\",\n              alignItems: \"center\",\n            }}\n          >\n            <Audio audio={urduAudio} />\n            <img\n              src={imageURL}\n              alt=\"result\"\n              className={classes.resultImage}\n              onError={reloadSrc}\n            />\n          </Grid>\n        </Grid>\n      </TabPanel>\n    </Card>\n  );\n}\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/Sidebar.js",["227","228","229","230"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Drawer,\n  IconButton,\n  List,\n  Typography,\n  SvgIcon,\n} from \"@material-ui/core\";\nimport {\n  // Home as HomeIcon,\n  GrassIcon as GrassIcon,\n  ArrowBack as ArrowBackIcon,\n} from \"@material-ui/icons\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { withRouter } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport { useMediaQuery } from \"react-responsive\";\nimport Logout from \"../../assets/logout.svg\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\n\n// context\nimport {\n  useLayoutState,\n  useLayoutDispatch,\n  toggleSidebar,\n} from \"../../context/LayoutContext\";\nimport {\n  useUserDispatch,\n  useUserState,\n  signOut,\n} from \"../../context/UserContext\";\n\nconst HomeIcon = (props) => {\n  return (\n    <SvgIcon {...props} viewBox=\"0 0 80 80\">\n      <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title />\n        <path d=\"M19,8H9A1,1,0,0,1,9,6H19a1,1,0,0,1,0,2Z\" fill=\"#456cb8\" />\n        <path d=\"M19,13H9a1,1,0,0,1,0-2H19a1,1,0,0,1,0,2Z\" fill=\"#456cb8\" />\n        <path d=\"M19,18H9a1,1,0,0,1,0-2H19a1,1,0,0,1,0,2Z\" fill=\"#456cb8\" />\n        <circle cx=\"5\" cy=\"7\" fill=\"#456cb8\" r=\"1\" />\n        <circle cx=\"5\" cy=\"12\" fill=\"#456cb8\" r=\"1\" />\n        <circle cx=\"5\" cy=\"17\" fill=\"#456cb8\" r=\"1\" />\n      </svg>{\" \"}\n    </SvgIcon>\n  );\n};\n\nconst DiseaseIcon = (props) => {\n  return (\n    <SvgIcon {...props} viewBox=\"0 0 60 60\">\n      <g id=\"row_4\" />\n      <g id=\"row_3\" />\n      <g id=\"row_2\">\n        <g id=\"eco_x5F_friendly\">\n          <g>\n            <path\n              d=\"M29.3,4.1c1,2.2,1.7,6.7,1.7,13.9v36h2V18.7c0-7.8-1.5-12.7-2.6-15.2C29.3,1.2,28.2,1.7,29.3,4.1z\"\n              fill=\"#33691E\"\n            />\n            <path\n              d=\"M35.3,20.2l-0.7-0.7c1.6-1.4,2-4.1,2.5-6.2c0.2-0.7,0.7-1.3,1.3-1.5c1.9-0.7,3.7-1.5,5.4-2.4     c0.4-0.2,0.9-0.3,1.3-0.2c2.5,0.5,4.5,1.5,6.8,1.3c2.9-0.2,3.7,0.8,0.6,1.1c-2.5,0.2-5.1,0.1-7.8-0.4c-1.8,1-3.7,1.8-5.7,2.5     C38.5,16.1,37.1,18.5,35.3,20.2z\"\n              fill=\"#33691E\"\n            />\n            <path\n              d=\"M50.2,10.6c0.8,0,1.5,0,2.2-0.1c-2.9,0.8-5.7,1.7-8.5,2.7c-3.3,1.2-6.1,3.4-8.1,6.3     c-0.2-0.2-0.4-0.2-0.7-0.2c-0.2,0-0.4,0.1-0.6,0.2c1.7-1.6,2.9-3.7,3.5-6c0.1-0.4,0.3-0.6,0.7-0.8c1.9-0.7,3.8-1.5,5.5-2.4     c0.2-0.1,0.5-0.2,0.7-0.1C46.7,10.5,48.4,10.6,50.2,10.6z\"\n              fill=\"#558B2F\"\n            />\n            <path\n              d=\"M33,30h-1c0-3.1,0.8-6.2,2.3-9c0.4-0.7,0.8-1.3,1.2-1.9c2.1-3,5-5.2,8.4-6.4C51.4,10,61,8.5,61,8.5     c-2.9,0.6-5.8,1.6-8.5,2.3c-3,0.8-5.7,1.9-8.3,2.9c-3.2,1.1-5.9,3.2-7.9,6.1c-0.4,0.5-0.8,1.1-1.1,1.8C33.7,24.1,33,27,33,30z\"\n              fill=\"#33691E\"\n            />\n            <path\n              d=\"M52.8,13.9c-2.2,4.2-7.2,6.5-12.3,6.5c-1.5,0-4.7-0.9-4.7-0.9c-0.3-0.7-1.3-0.8-1.9-0.6     c-0.5,0.2-0.9,0.7-0.9,1.4c0,0.6,0.3,1.2,0.7,1.6c0.6-0.8,1-1.8,1.6-1.4c1.4,0.9,3.2,1.9,5.1,1.9c5.7,0,11.1-2.9,13.9-7.5     c1.5-2.5,3.5-5.3,6.5-6.4C61,8.5,54.9,9.9,52.8,13.9z\"\n              fill=\"#689F38\"\n            />\n            <path\n              d=\"M61,8.5c-3,1.2-5.6,3.2-7.3,5.9c-2.7,4.3-7.7,7-13.1,7c-1.9,0-3.4-0.7-4.7-1.9c0,0,0,0,0,0     c2-2.8,4.8-5.1,8.1-6.3c2.8-1,5.6-1.9,8.5-2.7C55.5,10.3,58.3,9.6,61,8.5z\"\n              fill=\"#8BC34A\"\n            />\n            <path\n              d=\"M50.4,10.8c2.8-0.9,7.4-1.9,10.6-2.2C58.3,9.6,56.3,11.9,50.4,10.8z\"\n              fill=\"#558B2F\"\n            />\n            <path\n              d=\"M32.8,29.6c-0.2-1-0.5-1.9-0.8-3c-1.5-4.5-4-8.4-7.4-11.7c-5.5-5.3-12.2-8-20.1-8c0,0-0.7,0-0.7,0     l0.6,0.5c8.9,7.1,16.9,15.3,23.8,24.3h0c0.1,0.1,0.1,0.2,0.2,0.2c0.3,0.3,0.5,0.7,0.7,1c0,0,0,0,0,0c0.2,0.3,0.3,0.5,0.4,0.7     c0.6,0.5,1.8,0.2,2.4-0.5c0.6-0.7,1-1.7,1-2.7C32.9,30.1,32.9,29.9,32.8,29.6z\"\n              fill=\"#689F38\"\n            />\n            <path\n              d=\"M27.7,31C20.8,22.2,13,14.3,4.3,7.3L3.8,6.8C5.6,19.5,15.3,30,28.1,31.6C28.1,31.6,27.9,31.2,27.7,31z\"\n              fill=\"#558B2F\"\n            />\n            <path\n              d=\"M32,42h-1c0-3.5-0.5-6.3-2.2-8.6c-0.6-0.9-1.5-2.1-1.5-2.1c-1.2-1.6-0.4-2.2,0.8-0.6c0,0,0.8,1.1,1.5,2     C31.4,35.2,32,38.2,32,42z M24.8,28.1c-1.3-1.5-2.4-3.2-3.8-4.7c-0.5-0.6-0.1-1,0.5-0.4c1.3,1.5,2.8,2.9,4.1,4.4     C26.3,28.4,25.5,29,24.8,28.1z M19.7,22c-2.7-2.9-5.6-5.8-8.5-8.4c-0.6-0.5-0.3-0.9,0.3-0.4c3,2.7,5.9,5.5,8.6,8.4     C20.6,22.1,20.1,22.5,19.7,22z M8.2,10.9C6.9,9.7,5,8.1,3.8,6.8c0,0,3.4,2.6,4.7,3.7C9.3,11.3,9,11.6,8.2,10.9z\"\n              fill=\"#33691E\"\n            />\n          </g>\n          <g>\n            <path\n              d=\"M51.1,57.8c0,1.3-1.1,2.4-2.4,2.4c-1.3,0-2.4-1.1-2.4-2.4c0-0.2,0-0.4,0.1-0.5c-0.6,0.7-1.5,1.2-2.5,1.2     c-1.8,0-3.2-1.5-3.2-3.3s1.4-3.3,3.2-3.3s3.2,1.5,3.2,3.3c0,0.3-0.1,0.6-0.2,0.9c0.4-0.5,1.1-0.8,1.8-0.8     C50,55.4,51.1,56.5,51.1,57.8z M34,52.4c-2.1,0-3.9,1.7-3.9,3.9c0,0.1,0,0.2,0,0.3c-0.2-0.1-0.4-0.1-0.6-0.1c-0.1,0-0.2,0-0.2,0     c0-0.1,0-0.3,0-0.4c0-1.8-1.4-3.3-3.2-3.3s-3.2,1.5-3.2,3.3c0,0.9,0.3,1.7,0.9,2.2c-0.2,0.3-0.2,0.6-0.2,1c0,1.1,0.9,2,2,2     s2-0.9,2-2c0-0.1,0-0.2,0-0.3c0.1,0,0.2-0.1,0.3-0.2c0.2,0.8,0.9,1.3,1.7,1.3c0.8,0,1.4-0.5,1.7-1.1c0.7,0.7,1.7,1.2,2.8,1.2     c2.1,0,3.9-1.7,3.9-3.9C37.8,54.2,36.1,52.4,34,52.4z M20.5,55.8c-1.3,0-2.4,1.1-2.4,2.4s1.1,2.4,2.4,2.4s2.4-1.1,2.4-2.4     S21.8,55.8,20.5,55.8z\"\n              fill=\"#212121\"\n            />\n            <path\n              d=\"M29.8,55.4c-1.2,0-2.1-1-2.1-2.1c0-1.2,0.9-2.1,2.1-2.1s2.1,1,2.1,2.1C31.9,54.5,31,55.4,29.8,55.4z      M31.9,56.8c-1.2,0-2.2,1-2.2,2.2s1,2.2,2.2,2.2c1.2,0,2.2-1,2.2-2.2S33.1,56.8,31.9,56.8z M39,49.9c-1,0-2,0.6-2.4,1.4     c-0.2-0.1-0.5-0.2-0.8-0.2c-0.9,0-1.6,0.7-1.6,1.6s0.7,1.6,1.6,1.6c0.3,0,0.6-0.1,0.8-0.2c0.5,0.9,1.4,1.4,2.4,1.4     c1.6,0,2.8-1.3,2.8-2.8S40.6,49.9,39,49.9z M11.4,56.8c0,0.9,0.7,1.6,1.6,1.6c0.9,0,1.6-0.7,1.6-1.6s-0.7-1.6-1.6-1.6     C12.1,55.2,11.4,56,11.4,56.8z\"\n              fill=\"#6D4C41\"\n            />\n          </g>\n          <g>\n            <path\n              d=\"M43,58c0,2.2-1.8,4-4,4c-2.2,0-4-1.8-4-4c0-2.2,1.8-4,4-4C41.2,54,43,55.8,43,58z M44,51.5     c-1.4,0-2.5,1.1-2.5,2.5s1.1,2.5,2.5,2.5s2.5-1.1,2.5-2.5S45.4,51.5,44,51.5z M35,52c-1.1,0-2,0.9-2,2s0.9,2,2,2s2-0.9,2-2     S36.1,52,35,52z M48,54.5c-0.8,0-1.5,0.7-1.5,1.5s0.7,1.5,1.5,1.5s1.5-0.7,1.5-1.5S48.8,54.5,48,54.5z M23,50.5     c-1.9,0-3.5,1.6-3.5,3.5c0,1.9,1.6,3.5,3.5,3.5s3.5-1.6,3.5-3.5C26.5,52.1,24.9,50.5,23,50.5z\"\n              fill=\"#3E2723\"\n            />\n            <path\n              d=\"M21,57c0,2.2-1.8,4-4,4s-4-1.8-4-4c0-2.2,1.8-4,4-4S21,54.8,21,57z M31,54c-1.7,0-3,1.3-3,3     c0,1.7,1.3,3,3,3c1.7,0,3-1.3,3-3C34,55.3,32.7,54,31,54z M27,52c-1.1,0-2,0.9-2,2s0.9,2,2,2c1.1,0,2-0.9,2-2S28.1,52,27,52z      M45,56c-1.7,0-3,1.3-3,3c0,1.7,1.3,3,3,3s3-1.3,3-3C48,57.3,46.7,56,45,56z\"\n              fill=\"#4E342E\"\n            />\n            <path\n              d=\"M14,59c0,1.1-0.9,2-2,2s-2-0.9-2-2s0.9-2,2-2S14,57.9,14,59z M23,56.5c-1.4,0-2.5,1.1-2.5,2.5     s1.1,2.5,2.5,2.5s2.5-1.1,2.5-2.5S24.4,56.5,23,56.5z M28,58.5c-0.8,0-1.5,0.7-1.5,1.5s0.7,1.5,1.5,1.5s1.5-0.7,1.5-1.5     S28.8,58.5,28,58.5z M34,58.5c-0.8,0-1.5,0.7-1.5,1.5s0.7,1.5,1.5,1.5s1.5-0.7,1.5-1.5S34.8,58.5,34,58.5z M51,57     c-1.1,0-2,0.9-2,2s0.9,2,2,2s2-0.9,2-2S52.1,57,51,57z\"\n              fill=\"#5D4037\"\n            />\n          </g>\n        </g>\n      </g>\n      <g id=\"row_1\" />\n    </SvgIcon>\n  );\n};\n\nconst StatisticsIcon = (props) => {\n  return (\n    <SvgIcon viewBox=\"0 0 44 44\" {...props}>\n      <g>\n        <path\n          fill=\"#FEBECC\"\n          d=\"M48.88,19c-2.04-0.66-4.22-1.03-6.48-1.03c-11.6,0-21,9.4-21,21c0,3.07,0.67,5.98,1.86,8.61h25.62V19z\"\n        />\n        <g>\n          <g>\n            <path\n              fill=\"#9BEAF9\"\n              d=\"M41.74,3.17H8.01c-1.09,0-1.98,0.89-1.98,1.98v23.48h37.68V5.15C43.71,4.07,42.83,3.17,41.74,3.17z\"\n            />\n            <polygon\n              fill=\"#FF9D9C\"\n              points=\"47.88,34.95 1.88,34.95 6.04,28.64 43.71,28.64    \"\n            />\n            <rect fill=\"#CDF6FC\" height=\"4\" width=\"46\" x=\"1.88\" y=\"34.95\" />\n            <rect\n              fill=\"#FFFFFF\"\n              height=\"4.56\"\n              width=\"3.12\"\n              x=\"12.86\"\n              y=\"21.58\"\n            />\n            <rect\n              fill=\"#E9F4BC\"\n              height=\"7.53\"\n              width=\"3.12\"\n              x=\"19.24\"\n              y=\"18.61\"\n            />\n            <rect height=\"11.47\" width=\"3.12\" x=\"25.62\" y=\"14.67\" />\n            <rect\n              fill=\"#E9F4BC\"\n              height=\"15.94\"\n              width=\"3.12\"\n              x=\"32.74\"\n              y=\"10.2\"\n            />\n          </g>\n          <g>\n            <circle fill=\"#505050\" cx=\"6.04\" cy=\"19.32\" r=\"0.75\" />\n            <path\n              fill=\"#505050\"\n              d=\"M48.62,34.93c0-0.02-0.01-0.04-0.01-0.06c-0.01-0.1-0.04-0.2-0.09-0.28c-0.01-0.01-0.01-0.03-0.02-0.05     l-4.04-6.13V8.68c0.01-0.02,0.01-0.04,0.01-0.05c0-0.01,0-0.01-0.01-0.02V5.15c0-1.5-1.22-2.72-2.72-2.72H8.02     c-1.51,0-2.73,1.22-2.73,2.72v12.17c0,0.42,0.34,0.75,0.75,0.75c0.41,0,0.75-0.33,0.75-0.75V5.15c0-0.67,0.55-1.22,1.23-1.23     h33.72c0.67,0.01,1.22,0.56,1.22,1.23v3.48c0,0.02,0.01,0.03,0.01,0.05l-0.01,19.21H6.79v-6.57c0-0.41-0.34-0.75-0.75-0.75     c-0.41,0-0.74,0.33-0.75,0.74v0.01v7.09l-4.04,6.13c-0.01,0.01-0.01,0.03-0.02,0.05c-0.05,0.09-0.08,0.18-0.09,0.28     c0,0.02-0.01,0.04-0.01,0.06c0,0.01,0,0.01,0,0.02v4c0,0.41,0.34,0.75,0.75,0.75h46c0.41,0,0.75-0.34,0.75-0.75v-4     C48.63,34.94,48.62,34.94,48.62,34.93z M6.44,29.39h36.87l3.17,4.81H3.27L6.44,29.39z M47.13,38.2H2.63v-2.5h44.5V38.2z\"\n            />\n            <path\n              fill=\"#505050\"\n              d=\"M12.11,21.58v4.56c0,0.41,0.34,0.75,0.75,0.75h3.12c0.41,0,0.75-0.34,0.75-0.75v-4.56     c0-0.41-0.34-0.75-0.75-0.75h-3.12C12.45,20.83,12.11,21.17,12.11,21.58z M13.61,22.33h1.62v3.06h-1.62V22.33z\"\n            />\n            <path\n              fill=\"#505050\"\n              d=\"M19.24,17.86c-0.41,0-0.75,0.34-0.75,0.75v7.53c0,0.41,0.34,0.75,0.75,0.75h3.12c0.41,0,0.75-0.34,0.75-0.75     v-7.53c0-0.41-0.34-0.75-0.75-0.75H19.24z M21.61,25.39h-1.62v-6.03h1.62V25.39z\"\n            />\n            <path\n              fill=\"#505050\"\n              d=\"M25.62,13.92c-0.41,0-0.75,0.34-0.75,0.75v11.47c0,0.41,0.34,0.75,0.75,0.75h3.12     c0.41,0,0.75-0.34,0.75-0.75V14.67c0-0.41-0.34-0.75-0.75-0.75H25.62z M27.99,25.39h-1.62v-9.97h1.62V25.39z\"\n            />\n            <path\n              fill=\"#505050\"\n              d=\"M35.86,26.89c0.41,0,0.75-0.34,0.75-0.75V10.2c0-0.41-0.34-0.75-0.75-0.75h-3.12     c-0.41,0-0.75,0.34-0.75,0.75v15.94c0,0.41,0.34,0.75,0.75,0.75H35.86z M33.49,10.95h1.62v14.44h-1.62V10.95z\"\n            />\n            <path\n              fill=\"#505050\"\n              d=\"M14.87,17.67c0.15,0.2,0.38,0.31,0.61,0.31c0.15,0,0.31-0.05,0.44-0.15l11.67-8.54l-0.19,1.21     c-0.06,0.41,0.22,0.79,0.63,0.86c0.04,0.01,0.08,0.01,0.12,0.01c0.36,0,0.68-0.26,0.74-0.64l0.46-3     c0.06-0.41-0.22-0.79-0.63-0.86l-3-0.46c-0.4-0.06-0.79,0.22-0.86,0.63c-0.06,0.41,0.22,0.79,0.63,0.86l1.21,0.19l-11.67,8.54     C14.69,16.87,14.62,17.33,14.87,17.67z\"\n            />\n          </g>\n        </g>\n      </g>\n    </SvgIcon>\n  );\n};\n\nconst WeatherIcon = (props) => {\n  return (\n    <SvgIcon viewBox=\"0 0 512 512\" {...props}>\n      <title />\n      <path\n        d=\"M256,149a106,106,0,0,0-84.28,170.28A106,106,0,0,0,320.28,170.72,105.53,105.53,0,0,0,256,149Z\"\n        fill=\"#f7ad1e\"\n      />\n      <line\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"20\"\n        x1=\"235\"\n        x2=\"235\"\n        y1=\"43\"\n        y2=\"102\"\n      />\n      <line\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"20\"\n        x1=\"99.24\"\n        x2=\"140.95\"\n        y1=\"99.23\"\n        y2=\"140.95\"\n      />\n      <line\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"20\"\n        x1=\"43\"\n        x2=\"102\"\n        y1=\"235\"\n        y2=\"235\"\n      />\n      <line\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"20\"\n        x1=\"368\"\n        x2=\"426.99\"\n        y1=\"235\"\n        y2=\"235\"\n      />\n      <line\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"20\"\n        x1=\"329.04\"\n        x2=\"370.76\"\n        y1=\"140.95\"\n        y2=\"99.23\"\n      />\n      <path\n        d=\"M130.9,221.12A107.63,107.63,0,0,0,130,235a106,106,0,1,0,19.59-61.37\"\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"20\"\n      />\n      <path\n        d=\"M137.56,195.68c-.17.41-.34.81-.5,1.22\"\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"20\"\n      />\n      <g data-name=\"cloud\" id=\"cloud-2\">\n        <path\n          d=\"M394,296a64.88,64.88,0,0,0-22.86,4.14A106,106,0,0,0,161,320q0,4.08.31,8.08A50,50,0,1,0,147,426H394a65,65,0,0,0,0-130Z\"\n          fill=\"#fff\"\n        />\n        <path\n          d=\"M391.14,320.16a105.35,105.35,0,0,0-7.34-23.34,65.11,65.11,0,0,0-12.66,3.33,105.64,105.64,0,0,0-19.9-44.46A106,106,0,0,0,181,340c0,2.72.11,5.42.31,8.09a50,50,0,0,0-58.22,71.82A49.72,49.72,0,0,0,147,426H394a65,65,0,0,0,54.86-99.86,65,65,0,0,0-57.72-6Z\"\n          fill=\"#b6c4cf\"\n        />\n        <path\n          d=\"M394,296a64.88,64.88,0,0,0-22.86,4.14A106,106,0,0,0,161,320q0,4.08.31,8.08A50,50,0,1,0,147,426H394a65,65,0,0,0,0-130Z\"\n          fill=\"none\"\n        />\n      </g>\n      <path\n        d=\"M168.5,280.81c-.07.19-.15.37-.22.56s-.15.36-.22.55\"\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"20\"\n      />\n      <path\n        d=\"M458.87,364.41c1.86-33.07-22.91-63.16-55.72-67.76a65.39,65.39,0,0,0-32,3.5c-6.45-34.08-30-62.91-61.32-77.47C266,201,209,218,180.85,258.24\"\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-miterlimit=\"10\"\n        stroke-width=\"20\"\n      />\n      <path\n        d=\"M438.65,408.24a64.67,64.67,0,0,0,13.64-18.62\"\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-miterlimit=\"10\"\n        stroke-width=\"20\"\n      />\n      <path\n        d=\"M161.83,306.7a107.71,107.71,0,0,0-.53,21.39A50.48,50.48,0,0,0,102,354.22,48.32,48.32,0,0,0,102,398c3,5,6,11,11,15a83.42,83.42,0,0,0,12,8,120.9,120.9,0,0,0,18,5q129,1.5,258,0c5,0,11-3,15.92-4.16\"\n        fill=\"none\"\n        stroke=\"#02005c\"\n        stroke-linecap=\"round\"\n        stroke-miterlimit=\"10\"\n        stroke-width=\"20\"\n      />\n    </SvgIcon>\n  );\n};\n\nconst structure = [\n  {\n    id: 0,\n    label: \"Disease Detection\",\n    link: \"/app/disease-detection\",\n    icon: <DiseaseIcon height={50} width={50} />,\n  },\n  {\n    id: 1,\n    label: \"Fields\",\n    link: \"/app/fields\",\n    icon: <HomeIcon height={50} width={50} />,\n  },\n  {\n    id: 2,\n    label: \"Statistics\",\n    link: \"/app/statistics\",\n    icon: <StatisticsIcon height={70} width={70} />,\n  },\n  {\n    id: 3,\n    label: \"Weather\",\n    link: \"/app/weather\",\n    icon: <WeatherIcon height={50} width={50} />,\n  },\n];\n\nfunction Sidebar({ location, history }) {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  const { userName } = useUserState();\n\n  var userDispatch = useUserDispatch();\n\n  var isDesktop = useMediaQuery({\n    query: \"(min-width: 1024px)\",\n  });\n\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  // global\n  var { isSidebarOpened } = useLayoutState();\n\n  var layoutDispatch = useLayoutDispatch();\n  var userDispatch = useUserDispatch();\n\n  // local\n  var [isPermanent, setPermanent] = useState(true);\n\n  useEffect(function () {\n    window.addEventListener(\"resize\", handleWindowWidthChange);\n    handleWindowWidthChange();\n    return function cleanup() {\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\n    };\n  });\n\n  return (\n    <Drawer\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\n      className={classNames(classes.drawer, {\n        [classes.drawerOpen]: isSidebarOpened,\n        [classes.drawerClose]: !isSidebarOpened,\n      })}\n      classes={{\n        paper: classNames({\n          [classes.drawerOpen]: isSidebarOpened,\n          [classes.drawerClose]: !isSidebarOpened,\n        }),\n      }}\n      open={isSidebarOpened}\n    >\n      <div className={classes.toolbar} />\n      <div className={classes.mobileBackButton}>\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\n          <ArrowBackIcon\n            classes={{\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\n            }}\n            style={{\n              color: \"#fff\",\n            }}\n          />\n        </IconButton>\n      </div>\n      <div className={classes.userArea}>\n        <img src=\"/person.png\" className={classes.sideBarImage} alt=\"\" />\n        <h3>{userName}</h3>\n      </div>\n      <List className={classes.sidebarList}>\n        {structure.map((link) => (\n          <SidebarLink\n            key={link.id}\n            location={location}\n            isSidebarOpened={isSidebarOpened}\n            {...link}\n          />\n        ))}\n      </List>\n      <div\n        style={{\n          width: isMobile ? \"35%\" : \"40%\",\n          height: \"50px\",\n          marginLeft: \"2rem\",\n          marginTop: \"5rem\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <img src={Logout} width={30} height={30} alt=\"logout\"></img>\n        <Typography\n          onClick={() => signOut(userDispatch, history)}\n          variant=\"body1\"\n          style={{\n            cursor: \"pointer\",\n            fontSize: \"1rem\",\n            color: \"#fff\",\n          }}\n        >\n          Logout\n        </Typography>\n      </div>{\" \"}\n    </Drawer>\n  );\n\n  // ##################################################################\n  function handleWindowWidthChange() {\n    var windowWidth = window.innerWidth;\n    var breakpointWidth = theme.breakpoints.values.md;\n    var isSmallScreen = windowWidth < breakpointWidth;\n\n    if (isSmallScreen && isPermanent) {\n      setPermanent(false);\n    } else if (!isSmallScreen && !isPermanent) {\n      setPermanent(true);\n    }\n  }\n}\n\nexport default withRouter(Sidebar);\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/dashboard/Dashboard.js",["231"],"import React, { useRef, useEffect, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\nimport useStyles from \"./styles.js\";\nimport \"react-dropzone-uploader/dist/styles.css\";\n\nimport mapboxgl from \"!mapbox-gl\"; // eslint-disable-line import/no-webpack-loader-syntax\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport * as turf from \"@turf/turf\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport WeatherWidget from \"../../components/Weather_Widget/WeatherWidget\";\nimport DashboardPolygonTable from \"../../components/PolygonsTable/DashboardPolygonTable\";\n\nimport Button from \"@material-ui/core/Button\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport { SnackbarContent, Snackbar } from \"@material-ui/core\";\n\nimport \"date-fns\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_GL_ACCESS_TOKEN;\n\nexport default function Dashboard(props) {\n  var classes = useStyles();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const draw = useRef(null);\n  const [lng, setLng] = useState(73.1386);\n  const [lat, setLat] = useState(33.6762);\n  const [zoom, setZoom] = useState(8);\n  const [roundedArea, setroundedArea] = useState(0);\n  const [location, setLocation] = useState({\n    latitude: 32,\n    longitude: 73,\n  });\n  const [polygon, setPolygon] = useState({});\n\n  const [polygonName, setpolygonName] = useState(\"\");\n  const [fieldHelperText, setFieldHelperText] = useState(\"\");\n\n  const childRef = useRef();\n\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_GEO_LOCATION_URL}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setLocation({\n          latitude: data.latitude,\n          longitude: data.longitude,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: process.env.REACT_APP_MAPBOX_GL_STYLE,\n      center: [lng, lat],\n      zoom: zoom,\n    });\n\n    draw.current = new MapboxDraw({\n      displayControlsDefault: false,\n      controls: {\n        polygon: true,\n        trash: true,\n      },\n      defaultMode: \"draw_polygon\",\n    });\n    map.current.addControl(draw.current);\n    map.current.addControl(new mapboxgl.NavigationControl());\n\n    map.current.on(\"draw.create\", updateArea);\n    map.current.on(\"draw.delete\", updateArea);\n    map.current.on(\"draw.update\", updateArea);\n  });\n\n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n  });\n\n  const showMyLocation = () => {\n    if (!map.current) return;\n    map.current.flyTo({\n      center: [location.longitude, location.latitude],\n      essential: true,\n      zoom: 13,\n      speed: 2, // make the flying slow\n      curve: 1,\n    });\n  };\n\n  function updateArea(e) {\n    const data = draw.current.getAll();\n\n    console.log(\"Coooooordinates\", data.features[0].geometry.coordinates);\n\n    if (data.features.length > 0) {\n      const area = turf.area(data);\n      setroundedArea(Math.round(area * 100) / 100 / 10000);\n      setFieldHelperText(\"\");\n\n      const polygonData = turf.polygon(data.features[0].geometry.coordinates, {\n        name: { polygonName },\n      });\n\n      console.log(\"polygonData\", polygonData);\n\n      setPolygon(polygonData);\n    } else {\n      setroundedArea(0);\n      if (e.type !== \"draw.delete\") alert(\"Click the map to draw a polygon.\");\n    }\n  }\n\n  const createPolygon = () => {\n    if (roundedArea > 250) {\n      setFieldHelperText(\"Area cannot exceed 200ha\");\n    } else {\n      (async () => {\n        const rawResponse = await fetch(\n          `${process.env.REACT_APP_AGROMONITORING_API_URL}polygons?appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n          {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ geo_json: polygon, name: polygonName }),\n          },\n        );\n        await rawResponse.json();\n        childRef.current.updateTable();\n\n        if (rawResponse.statusText === \"Created\") {\n          setOpen(true);\n        }\n      })();\n      setpolygonName(\"\");\n    }\n  };\n\n  const handlePolygonNameChange = (e) => {\n    setpolygonName(e.target.value);\n  };\n\n  return (\n    <Grid container spacing={2}>\n      <Grid\n        item\n        xs={12}\n        md={7}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Grid item md={12} style={{ position: \"relative\" }}>\n          <div\n            style={{\n              position: \"absolute\",\n              top: \"10px\",\n              left: \"10px\",\n              zIndex: \"2\",\n              backgroundColor: \"white\",\n              borderRadius: \"5px\",\n              padding: \"5px\",\n            }}\n          >\n            <p style={{ margin: \"0px\" }}>Click the map to draw a polygon.</p>{\" \"}\n            <p style={{ margin: \"0px\" }}>\n              Note: Area cannot be greater than 200ha\n            </p>\n            <p style={{ margin: \"0px\" }}>\n              {\" \"}\n              {roundedArea > 0 ? `${roundedArea.toFixed(2)} ha` : \"\"}\n            </p>\n          </div>\n          <div ref={mapContainer} className={classes.map_container} />\n        </Grid>\n        <Button\n          onClick={showMyLocation}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          className={classes.locateButton}\n          startIcon={<LocationOnIcon />}\n        >\n          Locate Me\n        </Button>\n      </Grid>\n\n      <Grid item xs={12} md={5}>\n        <WeatherWidget location={location} />\n      </Grid>\n\n      <Grid item md={7} xs={12} m={20} className={classes.addPolygonContainer}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Enter field name\"\n          variant=\"outlined\"\n          size=\"small\"\n          value={polygonName}\n          onChange={handlePolygonNameChange}\n          className={classes.addPolygonInput}\n          helperText={fieldHelperText}\n          FormHelperTextProps={{\n            classes: {\n              root: classes.root,\n            },\n          }}\n          style={{\n            backgroundColor: \"rgba(255,255,255,1)\",\n            borderRadius: 25,\n            color: \"#fff\",\n          }}\n        />\n        <Button\n          onClick={createPolygon}\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.createPolygonButon}\n          disabled={roundedArea > 0 ? false : true}\n        >\n          Create field\n        </Button>\n      </Grid>\n      <Grid item md={12} xs={12} style={{ marginTop: \"50px\" }}>\n        <DashboardPolygonTable ref={childRef} />\n      </Grid>\n      <Snackbar\n        open={open}\n        autoHideDuration={2000}\n        onClose={() => setOpen(false)}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n        key={\"bottom\" + \" left\"}\n      >\n        <SnackbarContent\n          style={{\n            backgroundColor: \"rgb(56, 142, 60)\",\n          }}\n          message={<span id=\"client-snackbar\">Field created successfully</span>}\n        />\n      </Snackbar>\n    </Grid>\n  );\n}\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Header/Header.js",["232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261"],"import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  InputBase,\n  Menu,\n  MenuItem,\n  Fab,\n  Link,\n} from \"@material-ui/core\";\nimport {\n  Menu as MenuIcon,\n  MailOutline as MailIcon,\n  NotificationsNone as NotificationsIcon,\n  Person as AccountIcon,\n  Search as SearchIcon,\n  Send as SendIcon,\n  ArrowBack as ArrowBackIcon,\n} from \"@material-ui/icons\";\nimport classNames from \"classnames\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport { Badge, Typography, Button } from \"../Wrappers\";\nimport Notification from \"../Notification/Notification\";\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\n\n// context\nimport {\n  useLayoutState,\n  useLayoutDispatch,\n  toggleSidebar,\n} from \"../../context/LayoutContext\";\nimport { useUserDispatch, signOut } from \"../../context/UserContext\";\nimport { useMediaQuery } from \"react-responsive\";\n\nconst messages = [\n  {\n    id: 0,\n    variant: \"warning\",\n    name: \"Jane Hew\",\n    message: \"Hey! How is it going?\",\n    time: \"9:32\",\n  },\n  {\n    id: 1,\n    variant: \"success\",\n    name: \"Lloyd Brown\",\n    message: \"Check out my new Dashboard\",\n    time: \"9:18\",\n  },\n  {\n    id: 2,\n    variant: \"primary\",\n    name: \"Mark Winstein\",\n    message: \"I want rearrange the appointment\",\n    time: \"9:15\",\n  },\n  {\n    id: 3,\n    variant: \"secondary\",\n    name: \"Liana Dutti\",\n    message: \"Good news from sale department\",\n    time: \"9:09\",\n  },\n];\n\nconst notifications = [\n  { id: 0, color: \"warning\", message: \"Check out this awesome ticket\" },\n  {\n    id: 1,\n    color: \"success\",\n    type: \"info\",\n    message: \"What is the best way to get ...\",\n  },\n  {\n    id: 2,\n    color: \"secondary\",\n    type: \"notification\",\n    message: \"This is just a simple notification\",\n  },\n  {\n    id: 3,\n    color: \"primary\",\n    type: \"e-commerce\",\n    message: \"12 new orders has arrived today\",\n  },\n];\n\nexport default function Header(props) {\n  var classes = useStyles();\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  // global\n  var layoutState = useLayoutState();\n  var layoutDispatch = useLayoutDispatch();\n  var userDispatch = useUserDispatch();\n\n  // local\n  var [mailMenu, setMailMenu] = useState(null);\n  var [isMailsUnread, setIsMailsUnread] = useState(true);\n  var [notificationsMenu, setNotificationsMenu] = useState(null);\n  var [isNotificationsUnread, setIsNotificationsUnread] = useState(true);\n  var [profileMenu, setProfileMenu] = useState(null);\n  var [isSearchOpen, setSearchOpen] = useState(false);\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar className={classes.toolbar}>\n        {isMobile && (\n          <IconButton\n            color=\"inherit\"\n            onClick={() => toggleSidebar(layoutDispatch)}\n            className={classNames(\n              classes.headerMenuButtonSandwich,\n              classes.headerMenuButtonCollapse,\n            )}\n          >\n            {layoutState.isSidebarOpened ? (\n              <ArrowBackIcon\n                classes={{\n                  root: classNames(\n                    classes.headerIcon,\n                    classes.headerIconCollapse,\n                  ),\n                }}\n              />\n            ) : (\n              <MenuIcon\n                classes={{\n                  root: classNames(\n                    classes.headerIcon,\n                    classes.headerIconCollapse,\n                  ),\n                }}\n              />\n            )}\n          </IconButton>\n        )}\n        <Typography variant=\"h4\" weight=\"medium\" className={classes.logotype}>\n          AgriVision\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Image_Segmentation/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Image_Picker/Image_Picker.js",["262","263"],"import React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport useStyles from \"./styles.js\";\nimport \"react-dropzone-uploader/dist/styles.css\";\nimport ImageUploader from \"react-images-upload\";\n\nfunction ImagePicker(props) {\n  const classes = useStyles();\n\n  const onDrop = (pictureFile, pictureDataURL) => {\n    if (pictureDataURL.length > 0) {\n      props.handleImage(pictureDataURL[0]);\n    } else {\n      props.handleImagePresent(false);\n    }\n  };\n\n  return (\n    <div className={classes.image_picker_container}>\n      <ImageUploader\n        singleImage={true}\n        withPreview={true}\n        withIcon={true}\n        buttonText=\"Choose an image\"\n        onChange={onDrop}\n        imgExtension={[\".jpg\", \".jpeg\", \".png\"]}\n        label=\"Max file size: 10MB, accepted: JPG, PNG, JPEG\"\n        maxFileSize={10485760}\n      />\n    </div>\n  );\n}\n\nexport default ImagePicker;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/Statistics/NDVI_Layers.js",["264","265","266","267","268","269"],"import React, { useState, useEffect } from \"react\";\n\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport useStyles from \"./styles.js\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst StyledTableCell = withStyles({\n  root: {\n    color: \"#fff\",\n  },\n})(TableCell);\n\nfunction NDVILayers(props) {\n  var classes = useStyles();\n\n  const initialDate = new Date();\n  initialDate.setDate(initialDate.getDate() - 30);\n\n  const [metric, setMetric] = useState(\"ndvi\");\n  const [layersData, setLayersData] = useState([]);\n  const [tableData, setTableData] = useState({});\n  const [metricDate, setMetricDate] = useState(\"\");\n  const [imageURL, setImageURL] = useState();\n  const [imageLoading, setImageLoading] = useState();\n\n  useEffect(() => {\n    fetch(\n      `${process.env.REACT_APP_AGROMONITORING_API_URL}image/search?start=${props.fromDateUNIX}&end=${props.toDateUNIX}&polyid=${props.polygonId}&appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n    )\n      .then((response) => response.json())\n\n      .then((data) => {\n        if (data.length > 0) {\n          const dataB = data;\n          setLayersData(dataB);\n          setMetricDate(dataB[0].dt);\n\n          let layerStats = dataB[0].stats.ndvi;\n\n          if (layerStats.includes(\"http\")) {\n            layerStats = layerStats.replace(\"http\", \"https\");\n          }\n\n          setImageURL(dataB[0].image.ndvi);\n\n          fetch(layerStats)\n            .then((res) => res.json())\n            .then((data) => {\n              setTableData(data);\n            });\n        }\n      })\n      .catch((error) => {});\n  }, [props]);\n\n  const handleDateChange = (event) => {\n    setMetricDate(event.target.value);\n    const required_layer_object = layersData.filter(\n      (layer) => layer.dt === event.target.value,\n    );\n    switchFunction(metric, required_layer_object);\n    setImageLoading(true);\n  };\n\n  const handleMetricChange = (event) => {\n    setMetric(event.target.value);\n    const required_layer_object = layersData.filter(\n      (layer) => layer.dt === metricDate,\n    );\n    switchFunction(event.target.value, required_layer_object);\n  };\n\n  const switchFunction = (value, required_layer_object) => {\n    switch (value) {\n      case \"ndvi\":\n        setImageURL(required_layer_object[0].image.ndvi);\n\n        fetchStatsData(required_layer_object[0].stats.ndvi);\n        break;\n      case \"evi\":\n        setImageURL(required_layer_object[0].image.evi);\n        fetchStatsData(required_layer_object[0].stats.evi);\n        break;\n      case \"evi2\":\n        setImageURL(required_layer_object[0].image.evi2);\n        fetchStatsData(required_layer_object[0].stats.evi2);\n        break;\n      case \"ndwi\":\n        setImageURL(required_layer_object[0].image.ndwi);\n        fetchStatsData(required_layer_object[0].stats.ndwi);\n        break;\n      case \"nri\":\n        setImageURL(required_layer_object[0].image.nri);\n        fetchStatsData(required_layer_object[0].stats.nri);\n        break;\n      case \"dswi\":\n        setImageURL(required_layer_object[0].image.dswi);\n        fetchStatsData(required_layer_object[0].stats.dswi);\n        break;\n      default:\n    }\n    setImageLoading(false);\n  };\n\n  const fetchStatsData = (url) => {\n    if (url.includes(\"http\")) {\n      url = url.replace(\"http\", \"https\");\n    }\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setTableData(data);\n      });\n  };\n\n  const formatDate = (d) => {\n    const date = new Date(d * 1000);\n    // return (\n    //   date.getDate() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getFullYear()\n    // );\n\n    return date.toDateString();\n  };\n\n  const Layers = () => {\n    const standard_date = formatDate(metricDate);\n    return (\n      <Card\n        style={{\n          backgroundColor: \"#3F4257\",\n          borderRadius: \"10px\",\n        }}\n      >\n        <CardContent>\n          <TableContainer\n            style={{ backgroundColor: \"transparent\", color: \"white\" }}\n            sx={{\n              \".MuiTableBody-root\": {\n                backgroundColor: \"transparent\",\n                color: \"white\",\n              },\n            }}\n          >\n            <Table\n              sx={{ minWidth: 650, color: \"#fff\" }}\n              aria-label=\"simple table\"\n            >\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell>{standard_date}</StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {metric.toUpperCase()}\n                  </StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Maximum\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {tableData.max.toFixed(2)}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Minimum\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {tableData.min.toFixed(2)}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Mean\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {tableData.mean.toFixed(2)}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Median\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {tableData.median.toFixed(2)}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Deviation\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {tableData.std.toFixed(2)}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Number of pixels\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {tableData.num.toFixed(0)}\n                  </StyledTableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  var dateToBeSelected;\n\n  return (\n    <Grid container spacing={4}>\n      <Grid item md={6} xs={12}>\n        <Grid container spacing={2}>\n          <Grid item md={6} xs={5}>\n            <FormControl fullWidth>\n              <InputLabel\n                id=\"demo-simple-select-label\"\n                style={{ color: \"#fff\" }}\n              >\n                Select Date\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={metricDate}\n                label=\"date\"\n                defaultValue={metricDate}\n                onChange={(e) => {\n                  handleDateChange(e);\n                }}\n                style={{ color: \"#fff\" }}\n              >\n                {layersData.map(\n                  (layer, i) => (\n                    (dateToBeSelected = formatDate(layer.dt)),\n                    (\n                      <MenuItem value={layer.dt} key={i}>\n                        {dateToBeSelected}\n                      </MenuItem>\n                    )\n                  ),\n                )}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item md={6} xs={5}>\n            <FormControl fullWidth>\n              <InputLabel\n                id=\"demo-simple-select-label\"\n                style={{ color: \"#fff\" }}\n              >\n                Select Metric\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={metric}\n                label=\"metric\"\n                onChange={(e) => handleMetricChange(e)}\n                style={{ color: \"#fff\" }}\n              >\n                <MenuItem value=\"ndvi\">NDVI</MenuItem>\n                <MenuItem value=\"evi\">EVI</MenuItem>\n                <MenuItem value=\"evi2\">EVI2</MenuItem>\n                <MenuItem value=\"ndwi\">NDWI</MenuItem>\n                <MenuItem value=\"nri\">NRI</MenuItem>\n                <MenuItem value=\"dswi\">DSWI</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item md={12}>\n        <Grid container spacing={3}>\n          <Grid\n            item\n            md={4}\n            xs={12}\n            style={{\n              backgroundColor: \"transparent\",\n            }}\n          >\n            {tableData.max && <Layers />}\n          </Grid>\n          <Grid\n            item\n            md={6}\n            xs={12}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {tableData.max && (\n              <img\n                src={imageURL.replace(\"http\", \"https\")}\n                alt=\"loading\"\n                className={classes.layersImage}\n              ></img>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default NDVILayers;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Webcam/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/PolygonsTable/PolygonsTable.js",["270"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Column, HeaderCell, Cell } from \"rsuite-table\";\nimport \"rsuite-table/dist/css/rsuite-table.css\";\nimport Radio from \"@material-ui/core/Radio\";\nimport { useMediaQuery } from \"react-responsive\";\n\nconst PolygonTable = (props) => {\n  const [data, setdata] = useState([]);\n  const [sortColumn, setSortColumn] = useState();\n  const [sortType, setSortType] = useState();\n  const [loading, setLoading] = useState(false);\n  const [value, setValue] = useState(\"\");\n\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(\n      `${process.env.REACT_APP_AGROMONITORING_API_URL}polygons?appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.length > 0) {\n          setValue(data[0].id);\n          data.map((item, i) => {\n            const unixTimestamp = data[i].created_at;\n            var date = new Date(unixTimestamp * 1000);\n            const standard_date =\n              date.getDate() +\n              \"-\" +\n              (date.getMonth() + 1) +\n              \"-\" +\n              date.getFullYear();\n            data[i].created_at = standard_date;\n            data[i].area.toFixed(1);\n          });\n          setdata(data);\n        } else {\n          setdata([]);\n        }\n        setLoading(false);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  const getData = () => {\n    if (sortColumn && sortType) {\n      return data.sort((a, b) => {\n        let x = a[sortColumn];\n        let y = b[sortColumn];\n        if (typeof x === \"string\") {\n          x = x.charCodeAt();\n        }\n        if (typeof y === \"string\") {\n          y = y.charCodeAt();\n        }\n        if (sortType === \"asc\") {\n          return x - y;\n        } else {\n          return y - x;\n        }\n      });\n    }\n    return data;\n  };\n\n  const handleSortColumn = (sortColumn, sortType) => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setSortColumn(sortColumn);\n      setSortType(sortType);\n    }, 10);\n  };\n\n  const handleChange = (event) => {\n    props.onChange(event.target.value);\n    setValue(event.target.value);\n  };\n\n  const CheckCell = ({ rowData, onChange, checkedKeys, dataKey, ...props }) => (\n    <Cell {...props}>\n      <div>\n        <Radio\n          checked={value === rowData.id}\n          onChange={handleChange}\n          value={rowData.id}\n          name=\"radio-button\"\n          inputProps={{ \"aria-label\": \"A\" }}\n        />\n      </div>\n    </Cell>\n  );\n\n  return (\n    // loading ? (\n    //   <div style={{ height: \"200px\" }}>\n    //     <img\n    //       src=\"/horizontal-loader.gif\"\n    //       alt=\"loader\"\n    //       style={{ display: \"block\", margin: \"auto\" }}\n    //     ></img>\n    //   </div>\n    // ) : (\n    <Table\n      height={420}\n      data={getData()}\n      sortColumn={sortColumn}\n      sortType={sortType}\n      onSortColumn={handleSortColumn}\n      loading={loading}\n      autoHeight={true}\n      hover={false}\n      rowHeight={60}\n      headerHeight={40}\n      cellBordered={false}\n      bordered={false}\n      style={{\n        width: \"100%\",\n        backgroundColor: \"transparent\",\n        borderRadius: \"1rem\",\n        border: \"1px solid #fff\",\n      }}\n    >\n      <Column\n        width={isMobile ? 60 : 100}\n        align=\"center\"\n        style={{ backgroundColor: \" #3f4257\", color: \"white\" }}\n      >\n        <HeaderCell\n          style={{ backgroundColor: \"#3f4257\", color: \"white\", height: \"3rem\" }}\n        >\n          Select\n        </HeaderCell>\n        <CheckCell dataKey=\"id\" />\n      </Column>\n\n      <Column\n        flexGrow={1}\n        sortable\n        align=\"center\"\n        style={{ backgroundColor: \" #3f4257\", color: \"white\" }}\n      >\n        <HeaderCell style={{ backgroundColor: \"#3f4257\", color: \"white\" }}>\n          Polygon Name\n        </HeaderCell>\n        <Cell dataKey=\"name\" style={{ padding: \"20px\", border: \"none\" }} />\n      </Column>\n\n      <Column\n        flexGrow={1}\n        sortable\n        align=\"center\"\n        style={{ backgroundColor: \" #3f4257\", color: \"white\" }}\n      >\n        <HeaderCell style={{ backgroundColor: \"#3f4257\", color: \"white\" }}>\n          Created at\n        </HeaderCell>\n        <Cell dataKey=\"created_at\" style={{ padding: \"20px\" }} />\n      </Column>\n\n      <Column\n        flexGrow={1}\n        sortable\n        align=\"center\"\n        style={{ backgroundColor: \" #3f4257\", color: \"white\" }}\n      >\n        <HeaderCell style={{ backgroundColor: \"#3f4257\", color: \"white\" }}>\n          Area\n        </HeaderCell>\n        <Cell dataKey=\"area\" style={{ padding: \"20px\" }} />\n      </Column>\n    </Table>\n  );\n};\n\nexport default PolygonTable;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Charts/NDVI_Chart.js",["271","272","273","274","275"],"import React, { useState, useEffect } from \"react\";\n// import { Chart, LineAdvance, Axis } from \"bizcharts\";\nimport ReactApexChart from \"react-apexcharts\";\n\nfunction NDVIChart(props) {\n  let result = [];\n  // const [options, setOptions] = useState({});\n  const [chartData, setChartData] = useState([]);\n  const [chartDate, setChartDate] = useState([]);\n  result.push({\n    name: \"Maximum\",\n    data: [],\n  });\n  result.push({\n    name: \"Minimum\",\n    data: [],\n  });\n  result.push({\n    name: \"Mean\",\n    data: [],\n  });\n  props.data.map((item, i) => {\n    var unixTimestamp = props.data[i].dt;\n    var date = new Date(unixTimestamp * 1000);\n    const standard_date =\n      date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear();\n\n    result[0].data.push(item.data.max.toFixed(2));\n    result[1].data.push(item.data.min.toFixed(2));\n    result[2].data.push(item.data.mean.toFixed(2));\n    // setChartDate((prevState) => [...prevState, standard_date]);\n    chartDate.push(standard_date);\n  });\n\n  const options = {\n    chart: {\n      borderRadius: 10,\n      foreColor: \"#fff\",\n      height: \"auto\",\n      type: \"line\",\n      // background: \"#373368\",\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      curve: \"smooth\",\n      width: 3,\n    },\n    legend: {\n      show: true,\n      showForSingleSeries: false,\n      showForNullSeries: true,\n      showForZeroSeries: true,\n      position: \"bottom\",\n      horizontalAlign: \"center\",\n      floating: false,\n      fontSize: \"14px\",\n      fontFamily: \"Helvetica, Arial\",\n      fontWeight: 400,\n      formatter: undefined,\n      inverseOrder: false,\n      height: 50,\n      tooltipHoverFormatter: function (val, opts) {\n        return (\n          val +\n          \" - \" +\n          opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] +\n          \"\"\n        );\n      },\n      customLegendItems: [],\n      offsetX: 0,\n      offsetY: 0,\n      labels: {\n        // colors: \"#fff\",\n        useSeriesColors: false,\n      },\n      markers: {\n        width: 12,\n        height: 12,\n        strokeWidth: 0,\n        // strokeColor: \"#fff\",\n        fillColors: undefined,\n        radius: 12,\n        customHTML: undefined,\n        onClick: undefined,\n        offsetX: 0,\n        offsetY: 0,\n      },\n      itemMargin: {\n        horizontal: 5,\n        vertical: 0,\n      },\n      onItemClick: {\n        toggleDataSeries: true,\n      },\n      onItemHover: {\n        highlightDataSeries: true,\n      },\n    },\n\n    xaxis: {\n      categories: chartDate.reverse(),\n      labels: {\n        style: {\n          // colors: \"#fff\",\n        },\n      },\n    },\n    yaxis: {\n      labels: {\n        style: {\n          // colors: \"#fff\",\n        },\n      },\n    },\n    // grid: {\n    //   borderColor: \"red\",\n    //   strokeDashArray: 0,\n    //   position: \"back\",\n    //   show: true,\n    //   xaxis: {\n    //     lines: {\n    //       show: false,\n    //     },\n    //   },\n    //   yaxis: {\n    //     lines: {\n    //       show: false,\n    //     },\n    //   },\n    // },\n    theme: {\n      pallete: \"palette2\",\n      // mode: \"dark\",\n    },\n    tooltip: {\n      theme: true,\n      y: [\n        {\n          title: {\n            formatter: function (val) {\n              return val;\n            },\n          },\n        },\n        {\n          title: {\n            formatter: function (val) {\n              return val;\n            },\n          },\n        },\n        {\n          title: {\n            formatter: function (val) {\n              return val;\n            },\n          },\n        },\n      ],\n    },\n    colors: [\"#F44336\", \"#E91E63\", \"#9C27B0\"],\n    responsive: [\n      {\n        breakpoint: 1000,\n        options: {\n          plotOptions: {\n            bar: {\n              horizontal: false,\n            },\n          },\n          legend: {\n            position: \"bottom\",\n          },\n        },\n      },\n    ],\n    animations: {\n      enabled: true,\n      easing: \"easeinout\",\n      speed: 800,\n      animateGradually: {\n        enabled: true,\n        delay: 150,\n      },\n      dynamicAnimation: {\n        enabled: true,\n        speed: 350,\n      },\n    },\n    noData: {\n      text: \"No data for selected period\",\n      align: \"center\",\n      verticalAlign: \"middle\",\n      offsetX: 0,\n      offsetY: 0,\n      style: {\n        color: undefined,\n        fontSize: \"14px\",\n        fontFamily: undefined,\n      },\n    },\n  };\n\n  return (\n    <ReactApexChart\n      options={options}\n      series={result}\n      type=\"line\"\n      height={350}\n      style={{ borderRadius: \"5px\" }}\n    />\n  );\n}\n\nexport default NDVIChart;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Tab/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Image_Picker/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Header/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/dashboard/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Notification/Notification.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/UserAvatar/UserAvatar.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/PolygonsTable/DashboardPolygonTable.js",["276","277","278","279","280","281","282","283","284"],"import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Table, Column, HeaderCell, Cell } from \"rsuite-table\";\nimport \"rsuite-table/dist/css/rsuite-table.css\";\nimport {\n  Dialog,\n  Button,\n  TextField,\n  Modal,\n  DialogActions,\n  Typography,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  IconButton,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { useMediaQuery } from \"react-responsive\";\n\nconst useStyles = makeStyles((theme) => ({}));\n\nconst DashboardPolygonTable = forwardRef((props, ref) => {\n  const classes = useStyles();\n\n  const [data, setdata] = useState([]);\n  const [sortColumn, setSortColumn] = useState();\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [editName, setEditName] = useState(\"\");\n  const [polygonId, setPolygonId] = useState();\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [polygonToDelete, setPolygonToDelete] = useState();\n\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  useEffect(() => {\n    fetchPolygons();\n  }, []);\n\n  const fetchPolygons = () => {\n    fetch(\n      `${process.env.REACT_APP_AGROMONITORING_API_URL}polygons?appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        data.map((item, i) => {\n          const unixTimestamp = data[i].created_at;\n          var date = new Date(unixTimestamp * 1000);\n          const standard_date =\n            date.getDate() +\n            \"-\" +\n            (date.getMonth() + 1) +\n            \"-\" +\n            date.getFullYear();\n          data[i].created_at = standard_date;\n        });\n        if (data.length > 0) {\n          setdata(data);\n        } else {\n          setdata([]);\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useImperativeHandle(ref, () => ({\n    updateTable() {\n      console.log(\"update table\");\n      fetchPolygons();\n    },\n  }));\n\n  const ModalClick = (id) => {\n    setOpen(true);\n    setPolygonId(id);\n  };\n\n  const EditPolygon = () => {\n    fetch(\n      `${process.env.REACT_APP_AGROMONITORING_API_URL}polygons/${polygonId}?appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name: editName,\n        }),\n      },\n    );\n    setOpen(false);\n    setEditName(\"\");\n    setTimeout(() => {\n      fetchPolygons();\n    }, 500);\n  };\n\n  const DeletePolygon = async (id) => {\n    const response = await fetch(\n      `${process.env.REACT_APP_AGROMONITORING_API_URL}polygons/${id}?appid=${process.env.REACT_APP_AGROMONITORING_API_KEY}`,\n      {\n        method: \"DELETE\",\n      },\n    );\n\n    // remove the polygon from the table\n    setdata(data.filter((item) => item.id !== id));\n\n    // const newData = data.filter((item) => item.id !== id);\n\n    // setdata(newData);\n\n    // fetchPolygons();\n    setDialogOpen(false);\n  };\n\n  const EditPolygonsCell = ({\n    rowData,\n    onChange,\n    checkedKeys,\n    dataKey,\n    ...props\n  }) => (\n    <Cell {...props}>\n      <div>\n        <IconButton size=\"small\" onClick={() => ModalClick(rowData.id)}>\n          <EditIcon style={{ color: \"#fff\" }} />\n        </IconButton>\n        |\n        <IconButton\n          size=\"small\"\n          onClick={() => {\n            setDialogOpen(true);\n            setPolygonToDelete(rowData.id);\n          }}\n        >\n          <DeleteIcon style={{ color: \"#fff\" }} />\n        </IconButton>\n      </div>\n    </Cell>\n  );\n\n  const handleEditNameChange = (e) => {\n    setEditName(e.target.value);\n  };\n\n  return (\n    <div>\n      <Table\n        height={420}\n        data={data}\n        sortColumn={sortColumn}\n        loading={loading}\n        autoHeight={true}\n        cellBordered={false}\n        style={{\n          width: \"100%\",\n          backgroundColor: \"transparent\",\n          borderRadius: \"1rem\",\n          border: \"1px solid #fff\",\n        }}\n      >\n        <Column\n          align=\"center\"\n          flexGrow={2}\n          style={{ backgroundColor: \" #3f4257\", color: \"white\" }}\n        >\n          <HeaderCell style={{ backgroundColor: \"#3f4257\", color: \"white\" }}>\n            Field Name\n          </HeaderCell>\n          <Cell dataKey=\"name\" />\n        </Column>\n\n        <Column\n          align=\"center\"\n          flexGrow={1}\n          style={{ backgroundColor: \" #3f4257\", color: \"white\" }}\n        >\n          <HeaderCell style={{ backgroundColor: \"#3f4257\", color: \"white\" }}>\n            Created at\n          </HeaderCell>\n          <Cell dataKey=\"created_at\" />\n        </Column>\n\n        <Column\n          align=\"center\"\n          flexGrow={1}\n          style={{ backgroundColor: \" #3f4257\", color: \"white\" }}\n        >\n          <HeaderCell style={{ backgroundColor: \"#3f4257\", color: \"white\" }}>\n            Area\n          </HeaderCell>\n          <Cell dataKey=\"area\" />\n        </Column>\n\n        <Column\n          align=\"center\"\n          flexGrow={1}\n          style={{ backgroundColor: \" #3f4257\", color: \"white\" }}\n        >\n          <HeaderCell\n            style={{\n              backgroundColor: \"#3f4257\",\n              color: \"white\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Button onClick={() => fetchPolygons()}>\n              <RefreshIcon style={{ color: \"white\" }} />\n            </Button>\n          </HeaderCell>\n          <EditPolygonsCell />\n        </Column>\n      </Table>\n\n      <Dialog\n        fullWidth\n        open={open}\n        onClose={() => setOpen(false)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n        BackdropProps={{ style: { backgroundColor: \"rgba(0,0,0,0.5)\" } }}\n      >\n        <DialogTitle id=\"alert-dialog-title\">Edit field name</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Enter field name\"\n              variant=\"outlined\"\n              defaultValue={editName}\n              value={editName}\n              fullWidth\n              onChange={handleEditNameChange}\n              required\n            />\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={() => setOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            onClick={EditPolygon}\n            color=\"primary\"\n            disabled={editName === \"\" ? true : false}\n          >\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog\n        fullWidth\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n        BackdropProps={{ style: { backgroundColor: \"rgba(0,0,0,0.5)\" } }}\n      >\n        <DialogTitle id=\"alert-dialog-title\">Confirm delete</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Are you sure you want to delete this field?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={() => setDialogOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            color=\"primary\"\n            onClick={() => DeletePolygon(polygonToDelete)}\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n});\n\nexport default DashboardPolygonTable;\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Weather_Widget/WeatherWidget.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Wrappers/Wrappers.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/UserAvatar/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Notification/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/styles.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/components/SidebarLink/SidebarLink.js",["285"],"import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { Inbox as InboxIcon } from \"@material-ui/icons\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { useMediaQuery } from \"react-responsive\";\n\n// context\nimport {\n  useLayoutState,\n  useLayoutDispatch,\n  toggleSidebar,\n} from \"../../../../context/LayoutContext.js\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport Dot from \"../Dot\";\n\nexport default function SidebarLink({\n  link,\n  icon,\n  label,\n  children,\n  location,\n  isSidebarOpened,\n  nested,\n  type,\n}) {\n  var classes = useStyles();\n  var layoutDispatch = useLayoutDispatch();\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n\n  // local\n  var [isOpen, setIsOpen] = useState(false);\n  var isLinkActive =\n    link &&\n    (location.pathname === link || location.pathname.indexOf(link) !== -1);\n\n  if (type === \"title\")\n    return (\n      <Typography\n        className={classnames(classes.linkText, classes.sectionTitle, {\n          [classes.linkTextHidden]: !isSidebarOpened,\n        })}\n      >\n        {label}\n      </Typography>\n    );\n\n  if (type === \"divider\") return <Divider className={classes.divider} />;\n  if (link && link.includes(\"http\")) {\n    return (\n      <ListItem\n        button\n        className={classes.link}\n        classes={{\n          root: classnames(classes.linkRoot, {\n            [classes.linkActive]: isLinkActive && !nested,\n            [classes.linkNested]: nested,\n          }),\n        }}\n        disableRipple\n      >\n        <a className={classes.externalLink} href={link}>\n          <ListItemIcon\n            className={classnames(classes.linkIcon, {\n              [classes.linkIconActive]: isLinkActive,\n            })}\n          >\n            {nested ? <Dot color={isLinkActive && \"primary\"} /> : icon}\n          </ListItemIcon>\n          <ListItemText\n            classes={{\n              primary: classnames(classes.linkText, {\n                [classes.linkTextActive]: isLinkActive,\n                [classes.linkTextHidden]: !isSidebarOpened,\n              }),\n            }}\n            primary={label}\n          />\n        </a>\n      </ListItem>\n    );\n  }\n  if (!children)\n    return (\n      <ListItem\n        button\n        component={link && Link}\n        to={link}\n        className={classes.link}\n        classes={{\n          root: classnames(classes.linkRoot, {\n            [classes.linkActive]: isLinkActive && !nested,\n            [classes.linkNested]: nested,\n          }),\n        }}\n        disableRipple\n        onClick={() => (isMobile ? toggleSidebar(layoutDispatch) : \"\")}\n      >\n        <ListItemIcon\n          className={classnames(classes.linkIcon, {\n            [classes.linkIconActive]: isLinkActive,\n          })}\n        >\n          {nested ? <Dot color={isLinkActive && \"primary\"} /> : icon}\n        </ListItemIcon>\n        <ListItemText\n          classes={{\n            primary: classnames(classes.linkText, {\n              [classes.linkTextActive]: isLinkActive,\n              [classes.linkTextHidden]: !isSidebarOpened,\n            }),\n          }}\n          primary={label}\n        />\n      </ListItem>\n    );\n\n  return (\n    <>\n      <ListItem\n        button\n        component={link && Link}\n        onClick={toggleCollapse}\n        className={classes.link}\n        to={link}\n        disableRipple\n      >\n        <ListItemIcon\n          className={classnames(classes.linkIcon, {\n            [classes.linkIconActive]: isLinkActive,\n          })}\n        >\n          {icon ? icon : <InboxIcon />}\n        </ListItemIcon>\n        <ListItemText\n          classes={{\n            primary: classnames(classes.linkText, {\n              [classes.linkTextActive]: isLinkActive,\n              [classes.linkTextHidden]: !isSidebarOpened,\n            }),\n          }}\n          primary={label}\n        />\n      </ListItem>\n      {children && (\n        <Collapse\n          in={isOpen && isSidebarOpened}\n          timeout=\"auto\"\n          unmountOnExit\n          className={classes.nestedList}\n        >\n          <List component=\"div\" disablePadding>\n            {children.map((childrenLink) => (\n              <SidebarLink\n                key={childrenLink && childrenLink.link}\n                location={location}\n                isSidebarOpened={isSidebarOpened}\n                classes={classes}\n                nested\n                {...childrenLink}\n              />\n            ))}\n          </List>\n        </Collapse>\n      )}\n    </>\n  );\n\n  function toggleCollapse(e) {\n    if (isSidebarOpened) {\n      e.preventDefault();\n      setIsOpen(!isOpen);\n    }\n  }\n}\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/components/SidebarLink/styles.js",["286","287"],"import { makeStyles } from \"@material-ui/styles\";\n\nexport default makeStyles((theme) => ({\n  link: {\n    textDecoration: \"none\",\n    // color: \"white\",\n    background: \"linear-gradient(to right, #3F4257, #3F4257)\",\n    backgroundRepeat: \"no-repeat\",\n    transition: \"background-size 1s 0s\",\n    transform: \"perspective(1px) translateZ(0)\",\n    position: \"relative\",\n    transition: \"color 0.3s\",\n    \"&:hover\": {\n      color: \"black\",\n      \"& $linkIcon\": {\n        color: \"#3F4257\",\n      },\n      \"& $linkText\": {\n        color: \"#3F4257\",\n      },\n    },\n    \"&:focus\": {\n      backgroundColor: \"white\",\n    },\n    \"&:before\": {\n      content: '\"\"',\n      position: \"absolute\",\n      top: \"0\",\n      left: \"0\",\n      right: \"0\",\n      bottom: \"0\",\n      zIndex: \"-1\",\n      background: \"white\",\n      transform: \"scaleX(0)\",\n      transformOrigin: \"0 50%;\",\n      transition: \"transform 0.3s ease-out\",\n    },\n    \"&:hover:before\": {\n      transform: \"scaleX(1)\",\n    },\n  },\n  externalLink: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textDecoration: \"none\",\n  },\n  linkActive: {\n    background: \"white\",\n    color: \"#3F4257\",\n  },\n  linkNested: {\n    paddingLeft: 0,\n    \"&:hover, &:focus\": {\n      backgroundColor: \"white\",\n    },\n  },\n  linkIcon: {\n    marginRight: theme.spacing(1),\n    color: theme.palette.text.secondary + \"99\",\n    transition: theme.transitions.create(\"color\"),\n    width: 24,\n    display: \"flex\",\n    justifyContent: \"center\",\n    color: \"white\",\n  },\n  linkIconActive: {\n    // color: theme.palette.primary.main,\n    color: \"#3F4257\",\n  },\n  linkText: {\n    padding: 0,\n    color: \"white\",\n    // color: theme.palette.text.secondary + \"CC\",\n    transition: theme.transitions.create([\"opacity\", \"color\"]),\n    fontSize: 16,\n  },\n  linkTextActive: {\n    color: \"#3F4257\",\n  },\n  linkTextHidden: {\n    opacity: 0,\n  },\n  nestedList: {\n    paddingLeft: theme.spacing(2) + 30,\n  },\n  sectionTitle: {\n    marginLeft: theme.spacing(4.5),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  divider: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(4),\n    height: 1,\n    backgroundColor: \"#D8D8D880\",\n  },\n}));\n","/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/components/Sidebar/components/Dot.js",[],"/Users/salmaninayat/Coding Folder/Agri-D-Map-Web-Portal/src/pages/weather/styles.js",[],{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":2,"column":25,"nodeType":"294","messageId":"295","endLine":2,"endColumn":33},{"ruleId":"292","severity":1,"message":"296","line":4,"column":10,"nodeType":"294","messageId":"295","endLine":4,"endColumn":13},{"ruleId":"292","severity":1,"message":"297","line":4,"column":15,"nodeType":"294","messageId":"295","endLine":4,"endColumn":25},{"ruleId":"292","severity":1,"message":"298","line":4,"column":27,"nodeType":"294","messageId":"295","endLine":4,"endColumn":31},{"ruleId":"292","severity":1,"message":"299","line":5,"column":8,"nodeType":"294","messageId":"295","endLine":5,"endColumn":12},{"ruleId":"292","severity":1,"message":"300","line":22,"column":9,"nodeType":"294","messageId":"295","endLine":22,"endColumn":16},{"ruleId":"292","severity":1,"message":"301","line":39,"column":10,"nodeType":"294","messageId":"295","endLine":39,"endColumn":24},{"ruleId":"302","severity":1,"message":"303","line":80,"column":6,"nodeType":"304","endLine":80,"endColumn":8,"suggestions":"305"},{"ruleId":"302","severity":1,"message":"306","line":84,"column":6,"nodeType":"304","endLine":84,"endColumn":43,"suggestions":"307"},{"ruleId":"292","severity":1,"message":"308","line":18,"column":8,"nodeType":"294","messageId":"295","endLine":18,"endColumn":22},{"ruleId":"292","severity":1,"message":"309","line":19,"column":8,"nodeType":"294","messageId":"295","endLine":19,"endColumn":13},{"ruleId":"292","severity":1,"message":"310","line":23,"column":8,"nodeType":"294","messageId":"295","endLine":23,"endColumn":22},{"ruleId":"292","severity":1,"message":"311","line":31,"column":10,"nodeType":"294","messageId":"295","endLine":31,"endColumn":17},{"ruleId":"292","severity":1,"message":"312","line":34,"column":10,"nodeType":"294","messageId":"295","endLine":34,"endColumn":21},{"ruleId":"292","severity":1,"message":"313","line":34,"column":23,"nodeType":"294","messageId":"295","endLine":34,"endColumn":37},{"ruleId":"292","severity":1,"message":"296","line":3,"column":3,"nodeType":"294","messageId":"295","endLine":3,"endColumn":6},{"ruleId":"302","severity":1,"message":"314","line":50,"column":6,"nodeType":"304","endLine":50,"endColumn":8,"suggestions":"315"},{"ruleId":"316","severity":1,"message":"317","line":58,"column":28,"nodeType":"318","messageId":"319","endLine":58,"endColumn":30},{"ruleId":"302","severity":1,"message":"320","line":19,"column":19,"nodeType":"321","endLine":19,"endColumn":36},{"ruleId":"292","severity":1,"message":"322","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":25},{"ruleId":"292","severity":1,"message":"323","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":20},{"ruleId":"292","severity":1,"message":"324","line":4,"column":8,"nodeType":"294","messageId":"295","endLine":4,"endColumn":14},{"ruleId":"292","severity":1,"message":"325","line":52,"column":10,"nodeType":"294","messageId":"295","endLine":52,"endColumn":15},{"ruleId":"302","severity":1,"message":"326","line":60,"column":6,"nodeType":"304","endLine":60,"endColumn":8,"suggestions":"327"},{"ruleId":"328","severity":1,"message":"329","line":11,"column":3,"nodeType":"330","messageId":"331","endLine":11,"endColumn":25,"fix":"332"},{"ruleId":"292","severity":1,"message":"333","line":11,"column":16,"nodeType":"294","messageId":"295","endLine":11,"endColumn":25},{"ruleId":"292","severity":1,"message":"334","line":373,"column":7,"nodeType":"294","messageId":"295","endLine":373,"endColumn":16},{"ruleId":"335","severity":1,"message":"336","line":383,"column":7,"nodeType":"294","messageId":"337","endLine":383,"endColumn":19},{"ruleId":"338","severity":1,"message":"339","line":251,"column":23,"nodeType":"340","messageId":"341","endLine":251,"endColumn":24},{"ruleId":"292","severity":1,"message":"342","line":6,"column":3,"nodeType":"294","messageId":"295","endLine":6,"endColumn":12},{"ruleId":"292","severity":1,"message":"343","line":7,"column":3,"nodeType":"294","messageId":"295","endLine":7,"endColumn":7},{"ruleId":"292","severity":1,"message":"344","line":8,"column":3,"nodeType":"294","messageId":"295","endLine":8,"endColumn":11},{"ruleId":"292","severity":1,"message":"345","line":9,"column":3,"nodeType":"294","messageId":"295","endLine":9,"endColumn":6},{"ruleId":"292","severity":1,"message":"298","line":10,"column":3,"nodeType":"294","messageId":"295","endLine":10,"endColumn":7},{"ruleId":"292","severity":1,"message":"346","line":14,"column":18,"nodeType":"294","messageId":"295","endLine":14,"endColumn":26},{"ruleId":"292","severity":1,"message":"347","line":15,"column":24,"nodeType":"294","messageId":"295","endLine":15,"endColumn":41},{"ruleId":"292","severity":1,"message":"348","line":16,"column":13,"nodeType":"294","messageId":"295","endLine":16,"endColumn":24},{"ruleId":"292","severity":1,"message":"349","line":17,"column":13,"nodeType":"294","messageId":"295","endLine":17,"endColumn":23},{"ruleId":"292","severity":1,"message":"350","line":18,"column":11,"nodeType":"294","messageId":"295","endLine":18,"endColumn":19},{"ruleId":"292","severity":1,"message":"351","line":27,"column":10,"nodeType":"294","messageId":"295","endLine":27,"endColumn":15},{"ruleId":"292","severity":1,"message":"324","line":27,"column":29,"nodeType":"294","messageId":"295","endLine":27,"endColumn":35},{"ruleId":"292","severity":1,"message":"352","line":28,"column":8,"nodeType":"294","messageId":"295","endLine":28,"endColumn":20},{"ruleId":"292","severity":1,"message":"353","line":29,"column":8,"nodeType":"294","messageId":"295","endLine":29,"endColumn":18},{"ruleId":"292","severity":1,"message":"354","line":37,"column":27,"nodeType":"294","messageId":"295","endLine":37,"endColumn":34},{"ruleId":"292","severity":1,"message":"355","line":40,"column":7,"nodeType":"294","messageId":"295","endLine":40,"endColumn":15},{"ruleId":"292","severity":1,"message":"356","line":71,"column":7,"nodeType":"294","messageId":"295","endLine":71,"endColumn":20},{"ruleId":"292","severity":1,"message":"357","line":100,"column":7,"nodeType":"294","messageId":"295","endLine":100,"endColumn":19},{"ruleId":"292","severity":1,"message":"358","line":103,"column":8,"nodeType":"294","messageId":"295","endLine":103,"endColumn":16},{"ruleId":"292","severity":1,"message":"359","line":103,"column":18,"nodeType":"294","messageId":"295","endLine":103,"endColumn":29},{"ruleId":"292","severity":1,"message":"360","line":104,"column":8,"nodeType":"294","messageId":"295","endLine":104,"endColumn":21},{"ruleId":"292","severity":1,"message":"361","line":104,"column":23,"nodeType":"294","messageId":"295","endLine":104,"endColumn":39},{"ruleId":"292","severity":1,"message":"362","line":105,"column":8,"nodeType":"294","messageId":"295","endLine":105,"endColumn":25},{"ruleId":"292","severity":1,"message":"363","line":105,"column":27,"nodeType":"294","messageId":"295","endLine":105,"endColumn":47},{"ruleId":"292","severity":1,"message":"364","line":106,"column":8,"nodeType":"294","messageId":"295","endLine":106,"endColumn":29},{"ruleId":"292","severity":1,"message":"365","line":106,"column":31,"nodeType":"294","messageId":"295","endLine":106,"endColumn":55},{"ruleId":"292","severity":1,"message":"366","line":107,"column":8,"nodeType":"294","messageId":"295","endLine":107,"endColumn":19},{"ruleId":"292","severity":1,"message":"367","line":107,"column":21,"nodeType":"294","messageId":"295","endLine":107,"endColumn":35},{"ruleId":"292","severity":1,"message":"368","line":108,"column":8,"nodeType":"294","messageId":"295","endLine":108,"endColumn":20},{"ruleId":"292","severity":1,"message":"369","line":108,"column":22,"nodeType":"294","messageId":"295","endLine":108,"endColumn":35},{"ruleId":"292","severity":1,"message":"322","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":25},{"ruleId":"292","severity":1,"message":"370","line":2,"column":8,"nodeType":"294","messageId":"295","endLine":2,"endColumn":16},{"ruleId":"292","severity":1,"message":"296","line":7,"column":8,"nodeType":"294","messageId":"295","endLine":7,"endColumn":11},{"ruleId":"292","severity":1,"message":"371","line":10,"column":8,"nodeType":"294","messageId":"295","endLine":10,"endColumn":19},{"ruleId":"292","severity":1,"message":"372","line":12,"column":8,"nodeType":"294","messageId":"295","endLine":12,"endColumn":17},{"ruleId":"292","severity":1,"message":"373","line":21,"column":8,"nodeType":"294","messageId":"295","endLine":21,"endColumn":13},{"ruleId":"292","severity":1,"message":"374","line":41,"column":10,"nodeType":"294","messageId":"295","endLine":41,"endColumn":22},{"ruleId":"375","severity":1,"message":"376","line":269,"column":62,"nodeType":"377","messageId":"378","endLine":269,"endColumn":63},{"ruleId":"316","severity":1,"message":"317","line":25,"column":30,"nodeType":"318","messageId":"319","endLine":25,"endColumn":32},{"ruleId":"292","severity":1,"message":"379","line":1,"column":27,"nodeType":"294","messageId":"295","endLine":1,"endColumn":36},{"ruleId":"292","severity":1,"message":"380","line":8,"column":10,"nodeType":"294","messageId":"295","endLine":8,"endColumn":19},{"ruleId":"292","severity":1,"message":"381","line":8,"column":21,"nodeType":"294","messageId":"295","endLine":8,"endColumn":33},{"ruleId":"292","severity":1,"message":"382","line":9,"column":21,"nodeType":"294","messageId":"295","endLine":9,"endColumn":33},{"ruleId":"316","severity":1,"message":"317","line":22,"column":28,"nodeType":"318","messageId":"319","endLine":22,"endColumn":30},{"ruleId":"292","severity":1,"message":"383","line":5,"column":3,"nodeType":"294","messageId":"295","endLine":5,"endColumn":9},{"ruleId":"292","severity":1,"message":"384","line":14,"column":3,"nodeType":"294","messageId":"295","endLine":14,"endColumn":8},{"ruleId":"292","severity":1,"message":"385","line":16,"column":3,"nodeType":"294","messageId":"295","endLine":16,"endColumn":13},{"ruleId":"292","severity":1,"message":"386","line":32,"column":9,"nodeType":"294","messageId":"295","endLine":32,"endColumn":16},{"ruleId":"292","severity":1,"message":"387","line":35,"column":22,"nodeType":"294","messageId":"295","endLine":35,"endColumn":35},{"ruleId":"292","severity":1,"message":"388","line":36,"column":19,"nodeType":"294","messageId":"295","endLine":36,"endColumn":29},{"ruleId":"292","severity":1,"message":"389","line":44,"column":9,"nodeType":"294","messageId":"295","endLine":44,"endColumn":17},{"ruleId":"316","severity":1,"message":"317","line":56,"column":28,"nodeType":"318","messageId":"319","endLine":56,"endColumn":30},{"ruleId":"292","severity":1,"message":"390","line":109,"column":11,"nodeType":"294","messageId":"295","endLine":109,"endColumn":19},{"ruleId":"292","severity":1,"message":"391","line":18,"column":3,"nodeType":"294","messageId":"295","endLine":18,"endColumn":17},{"ruleId":"392","severity":1,"message":"393","line":12,"column":5,"nodeType":"394","messageId":"395","endLine":12,"endColumn":15},{"ruleId":"392","severity":1,"message":"396","line":65,"column":5,"nodeType":"394","messageId":"395","endLine":65,"endColumn":10},"no-native-reassign",["397"],"no-negated-in-lhs",["398"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'IconButton' is defined but never used.","'Link' is defined but never used.","'Icon' is defined but never used.","'history' is assigned a value but never used.","'firstPolygonId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fromDateUNIX' and 'toDateUNIX'. Either include them or remove the dependency array.","ArrayExpression",["399"],"React Hook useEffect has a missing dependency: 'getNDVI'. Either include it or remove the dependency array.",["400"],"'LoadingOverlay' is defined but never used.","'Audio' is defined but never used.","'FileUplaodIcon' is defined but never used.","'loading' is assigned a value but never used.","'resultAudio' is assigned a value but never used.","'setResultAudio' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchPolygons'. Either include it or remove the dependency array.",["401"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression","'useState' is defined but never used.","'makeStyles' is defined but never used.","'Button' is defined but never used.","'image' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.image'. Either include it or remove the dependency array. If 'setImage' needs the current value of 'props.image', you can also switch to useReducer instead of useState and read 'props.image' in the reducer.",["402"],"no-useless-rename","Import GrassIcon unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"403","text":"404"},"'GrassIcon' is defined but never used.","'isDesktop' is assigned a value but never used.","no-redeclare","'userDispatch' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'InputBase' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'Fab' is defined but never used.","'MailIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'AccountIcon' is defined but never used.","'SearchIcon' is defined but never used.","'SendIcon' is defined but never used.","'Badge' is defined but never used.","'Notification' is defined but never used.","'UserAvatar' is defined but never used.","'signOut' is defined but never used.","'messages' is assigned a value but never used.","'notifications' is assigned a value but never used.","'userDispatch' is assigned a value but never used.","'mailMenu' is assigned a value but never used.","'setMailMenu' is assigned a value but never used.","'isMailsUnread' is assigned a value but never used.","'setIsMailsUnread' is assigned a value but never used.","'notificationsMenu' is assigned a value but never used.","'setNotificationsMenu' is assigned a value but never used.","'isNotificationsUnread' is assigned a value but never used.","'setIsNotificationsUnread' is assigned a value but never used.","'profileMenu' is assigned a value but never used.","'setProfileMenu' is assigned a value but never used.","'isSearchOpen' is assigned a value but never used.","'setSearchOpen' is assigned a value but never used.","'Dropzone' is defined but never used.","'CardActions' is defined but never used.","'CardMedia' is defined but never used.","'Paper' is defined but never used.","'imageLoading' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'useEffect' is defined but never used.","'chartData' is assigned a value but never used.","'setChartData' is assigned a value but never used.","'setChartDate' is assigned a value but never used.","'useRef' is defined but never used.","'Modal' is defined but never used.","'Typography' is defined but never used.","'classes' is assigned a value but never used.","'setSortColumn' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'isMobile' is assigned a value but never used.","'response' is assigned a value but never used.","'useLayoutState' is defined but never used.","no-dupe-keys","Duplicate key 'transition'.","ObjectExpression","unexpected","Duplicate key 'color'.","no-global-assign","no-unsafe-negation",{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},[180,202],"GrassIcon","Update the dependencies array to be: [fromDateUNIX, toDateUNIX]",{"range":"413","text":"414"},"Update the dependencies array to be: [toDateUNIX, fromDateUNIX, polygonId, getNDVI]",{"range":"415","text":"416"},"Update the dependencies array to be: [fetchPolygons]",{"range":"417","text":"418"},"Update the dependencies array to be: [props.image]",{"range":"419","text":"420"},[2824,2826],"[fromDateUNIX, toDateUNIX]",[2894,2931],"[toDateUNIX, fromDateUNIX, polygonId, getNDVI]",[1491,1493],"[fetchPolygons]",[1837,1839],"[props.image]"]